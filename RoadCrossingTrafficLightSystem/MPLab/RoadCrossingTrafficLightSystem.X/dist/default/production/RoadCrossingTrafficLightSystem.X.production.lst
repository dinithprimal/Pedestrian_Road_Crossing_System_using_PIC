

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Wed Jan 01 09:05:24 2020

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    28                           	dabs	1,0x7E,2
    29  0000                     
    30                           ; Version 1.44
    31                           ; Generated 14/09/2017 GMT
    32                           ; 
    33                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC16F877A Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     	;# 
    65  0001                     	;# 
    66  0002                     	;# 
    67  0003                     	;# 
    68  0004                     	;# 
    69  0005                     	;# 
    70  0006                     	;# 
    71  0007                     	;# 
    72  0008                     	;# 
    73  0009                     	;# 
    74  000A                     	;# 
    75  000B                     	;# 
    76  000C                     	;# 
    77  000D                     	;# 
    78  000E                     	;# 
    79  000E                     	;# 
    80  000F                     	;# 
    81  0010                     	;# 
    82  0011                     	;# 
    83  0012                     	;# 
    84  0013                     	;# 
    85  0014                     	;# 
    86  0015                     	;# 
    87  0015                     	;# 
    88  0016                     	;# 
    89  0017                     	;# 
    90  0018                     	;# 
    91  0019                     	;# 
    92  001A                     	;# 
    93  001B                     	;# 
    94  001B                     	;# 
    95  001C                     	;# 
    96  001D                     	;# 
    97  001E                     	;# 
    98  001F                     	;# 
    99  0081                     	;# 
   100  0085                     	;# 
   101  0086                     	;# 
   102  0087                     	;# 
   103  0088                     	;# 
   104  0089                     	;# 
   105  008C                     	;# 
   106  008D                     	;# 
   107  008E                     	;# 
   108  0091                     	;# 
   109  0092                     	;# 
   110  0093                     	;# 
   111  0094                     	;# 
   112  0098                     	;# 
   113  0099                     	;# 
   114  009C                     	;# 
   115  009D                     	;# 
   116  009E                     	;# 
   117  009F                     	;# 
   118  010C                     	;# 
   119  010D                     	;# 
   120  010E                     	;# 
   121  010F                     	;# 
   122  018C                     	;# 
   123  018D                     	;# 
   124                           
   125                           	psect	idataBANK0
   126  0FF6                     __pidataBANK0:	
   127                           
   128                           ;initializer for _wt
   129  0FF6  340A               	retlw	10
   130  0FF7  3400               	retlw	0
   131                           
   132                           ;initializer for _at
   133  0FF8  3414               	retlw	20
   134  0FF9  3400               	retlw	0
   135  0007                     _PORTC	set	7
   136  0008                     _PORTD	set	8
   137  001A                     _RCREG	set	26
   138  005C                     _INTE	set	92
   139  005E                     _PEIE	set	94
   140  005F                     _GIE	set	95
   141  0035                     _RB5	set	53
   142  0036                     _RB6	set	54
   143  0037                     _RB7	set	55
   144  0032                     _RB2	set	50
   145  0059                     _INTF	set	89
   146  0065                     _RCIF	set	101
   147  00C4                     _CREN	set	196
   148  00C7                     _SPEN	set	199
   149  0088                     _TRISD	set	136
   150  0087                     _TRISC	set	135
   151  0099                     _SPBRG	set	153
   152  0437                     _TRISB7	set	1079
   153  0436                     _TRISB6	set	1078
   154  0435                     _TRISB5	set	1077
   155  0432                     _TRISB2	set	1074
   156  0430                     _TRISB0	set	1072
   157  04C5                     _TXEN	set	1221
   158  043F                     _TRISC7	set	1087
   159  04C4                     _SYNC	set	1220
   160  04C2                     _BRGH	set	1218
   161                           
   162                           ; #config settings
   163  0000                     
   164                           	psect	cinit
   165  0015                     start_initialization:	
   166  0015                     __initialization:	
   167                           
   168                           ; Initialize objects allocated to BANK0
   169  0015  120A  158A  27F6  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   170  001A  00D6               	movwf	__pdataBANK0& (0+127)
   171  001B  120A  158A  27F7  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   172  0020  00D7               	movwf	(__pdataBANK0+1)& (0+127)
   173  0021  120A  158A  27F8  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   174  0026  00D8               	movwf	(__pdataBANK0+2)& (0+127)
   175  0027  120A  158A  27F9   	fcall	__pidataBANK0+3	;fetch initializer
   176  002A  00D9               	movwf	(__pdataBANK0+3)& (0+127)
   177                           
   178                           ; Clear objects allocated to BANK1
   179  002B  1683               	bsf	3,5	;RP0=1, select bank1
   180  002C  1303               	bcf	3,6	;RP1=0, select bank1
   181  002D  01C8               	clrf	__pbssBANK1& (0+127)
   182  002E  01C9               	clrf	(__pbssBANK1+1)& (0+127)
   183  002F  01CA               	clrf	(__pbssBANK1+2)& (0+127)
   184  0030  01CB               	clrf	(__pbssBANK1+3)& (0+127)
   185  0031  01CC               	clrf	(__pbssBANK1+4)& (0+127)
   186  0032  01CD               	clrf	(__pbssBANK1+5)& (0+127)
   187                           
   188                           ; Clear objects allocated to BANK0
   189  0033  1283               	bcf	3,5	;RP0=0, select bank0
   190  0034  1303               	bcf	3,6	;RP1=0, select bank0
   191  0035  01DA               	clrf	__pbssBANK0& (0+127)
   192  0036  01DB               	clrf	(__pbssBANK0+1)& (0+127)
   193  0037  01DC               	clrf	(__pbssBANK0+2)& (0+127)
   194  0038                     end_of_initialization:	
   195                           ;End of C runtime variable initialization code
   196                           
   197  0038                     __end_of__initialization:	
   198  0038  0183               	clrf	3
   199  0039  120A  118A  2A26   	ljmp	_main	;jump to C main() function
   200                           
   201                           	psect	bssBANK0
   202  005A                     __pbssBANK0:	
   203  005A                     _count:	
   204  005A                     	ds	2
   205  005C                     _en:	
   206  005C                     	ds	1
   207                           
   208                           	psect	dataBANK0
   209  0056                     __pdataBANK0:	
   210  0056                     _wt:	
   211  0056                     	ds	2
   212  0058                     _at:	
   213  0058                     	ds	2
   214                           
   215                           	psect	bssBANK1
   216  00C8                     __pbssBANK1:	
   217  00C8                     _c2:	
   218  00C8                     	ds	3
   219  00CB                     _c1:	
   220  00CB                     	ds	3
   221                           
   222                           	psect	cstackBANK1
   223  00A0                     __pcstackBANK1:	
   224  00A0                     ??_UART_Data_Ready:	
   225  00A0                     ??_UART_Read:	
   226                           ; 1 bytes @ 0x0
   227                           
   228  00A0                     ?_UART_Read_Text:	
   229                           ; 1 bytes @ 0x0
   230                           
   231  00A0                     ?___aldiv:	
   232                           ; 1 bytes @ 0x0
   233                           
   234  00A0                     UART_Read_Text@length:	
   235                           ; 4 bytes @ 0x0
   236                           
   237  00A0                     ___aldiv@divisor:	
   238                           ; 2 bytes @ 0x0
   239                           
   240                           
   241                           ; 4 bytes @ 0x0
   242  00A0                     	ds	2
   243  00A2                     ??_UART_Read_Text:	
   244                           
   245                           ; 1 bytes @ 0x2
   246  00A2                     	ds	2
   247  00A4                     UART_Read_Text@Output:	
   248  00A4                     ___aldiv@dividend:	
   249                           ; 1 bytes @ 0x4
   250                           
   251                           
   252                           ; 4 bytes @ 0x4
   253  00A4                     	ds	1
   254  00A5                     UART_Read_Text@i_60:	
   255                           
   256                           ; 2 bytes @ 0x5
   257  00A5                     	ds	3
   258  00A8                     ??___aldiv:	
   259                           
   260                           ; 1 bytes @ 0x8
   261  00A8                     	ds	1
   262  00A9                     ___aldiv@counter:	
   263                           
   264                           ; 1 bytes @ 0x9
   265  00A9                     	ds	1
   266  00AA                     ___aldiv@sign:	
   267                           
   268                           ; 1 bytes @ 0xA
   269  00AA                     	ds	1
   270  00AB                     ___aldiv@quotient:	
   271                           
   272                           ; 4 bytes @ 0xB
   273  00AB                     	ds	4
   274  00AF                     ?_UART_Init:	
   275  00AF                     UART_Init@baudrate:	
   276                           ; 1 bytes @ 0xF
   277                           
   278                           
   279                           ; 4 bytes @ 0xF
   280  00AF                     	ds	4
   281  00B3                     ??_UART_Init:	
   282                           
   283                           ; 1 bytes @ 0x13
   284  00B3                     	ds	12
   285  00BF                     UART_Init@x:	
   286                           
   287                           ; 2 bytes @ 0x1F
   288  00BF                     	ds	2
   289  00C1                     ??_main:	
   290                           
   291                           ; 1 bytes @ 0x21
   292  00C1                     	ds	3
   293  00C4                     main@k:	
   294                           
   295                           ; 2 bytes @ 0x24
   296  00C4                     	ds	2
   297  00C6                     main@atc:	
   298                           
   299                           ; 1 bytes @ 0x26
   300  00C6                     	ds	1
   301  00C7                     main@wtc:	
   302                           
   303                           ; 1 bytes @ 0x27
   304  00C7                     	ds	1
   305                           
   306                           	psect	cstackCOMMON
   307  0070                     __pcstackCOMMON:	
   308  0070                     ?_UART_Data_Ready:	
   309  0070                     ?_UART_Read:	
   310                           ; 1 bytes @ 0x0
   311                           
   312  0070                     ?_decTo7Seg:	
   313                           ; 1 bytes @ 0x0
   314                           
   315  0070                     ?_ISR:	
   316                           ; 1 bytes @ 0x0
   317                           
   318  0070                     ?_main:	
   319                           ; 1 bytes @ 0x0
   320                           
   321  0070                     ?___wmul:	
   322                           ; 1 bytes @ 0x0
   323                           
   324  0070                     ?___awmod:	
   325                           ; 2 bytes @ 0x0
   326                           
   327  0070                     ?___ftpack:	
   328                           ; 2 bytes @ 0x0
   329                           
   330  0070                     decTo7Seg@a:	
   331                           ; 3 bytes @ 0x0
   332                           
   333  0070                     ___wmul@multiplier:	
   334                           ; 2 bytes @ 0x0
   335                           
   336  0070                     ___awmod@divisor:	
   337                           ; 2 bytes @ 0x0
   338                           
   339  0070                     ___ftpack@arg:	
   340                           ; 2 bytes @ 0x0
   341                           
   342                           
   343                           ; 3 bytes @ 0x0
   344  0070                     	ds	2
   345  0072                     ??_decTo7Seg:	
   346  0072                     ___wmul@multiplicand:	
   347                           ; 1 bytes @ 0x2
   348                           
   349  0072                     ___awmod@dividend:	
   350                           ; 2 bytes @ 0x2
   351                           
   352                           
   353                           ; 2 bytes @ 0x2
   354  0072                     	ds	1
   355  0073                     ___ftpack@exp:	
   356                           
   357                           ; 1 bytes @ 0x3
   358  0073                     	ds	1
   359  0074                     ??___wmul:	
   360  0074                     ??___awmod:	
   361                           ; 1 bytes @ 0x4
   362                           
   363  0074                     ___ftpack@sign:	
   364                           ; 1 bytes @ 0x4
   365                           
   366  0074                     ___wmul@product:	
   367                           ; 1 bytes @ 0x4
   368                           
   369                           
   370                           ; 2 bytes @ 0x4
   371  0074                     	ds	1
   372  0075                     ??___ftpack:	
   373  0075                     ___awmod@counter:	
   374                           ; 1 bytes @ 0x5
   375                           
   376                           
   377                           ; 1 bytes @ 0x5
   378  0075                     	ds	1
   379  0076                     ___awmod@sign:	
   380                           
   381                           ; 1 bytes @ 0x6
   382  0076                     	ds	1
   383  0077                     ?___awdiv:	
   384  0077                     ___awdiv@divisor:	
   385                           ; 2 bytes @ 0x7
   386                           
   387                           
   388                           ; 2 bytes @ 0x7
   389  0077                     	ds	1
   390  0078                     ?___awtoft:	
   391  0078                     ___awtoft@c:	
   392                           ; 3 bytes @ 0x8
   393                           
   394                           
   395                           ; 2 bytes @ 0x8
   396  0078                     	ds	1
   397  0079                     ___awdiv@dividend:	
   398                           
   399                           ; 2 bytes @ 0x9
   400  0079                     	ds	2
   401  007B                     ??___awdiv:	
   402  007B                     ??___awtoft:	
   403                           ; 1 bytes @ 0xB
   404                           
   405                           
   406                           ; 1 bytes @ 0xB
   407  007B                     	ds	2
   408  007D                     ___awtoft@sign:	
   409                           
   410                           ; 1 bytes @ 0xD
   411  007D                     	ds	1
   412                           
   413                           	psect	cstackBANK0
   414  0020                     __pcstackBANK0:	
   415  0020                     ?___ftmul:	
   416  0020                     ___awdiv@counter:	
   417                           ; 3 bytes @ 0x0
   418                           
   419  0020                     ___ftmul@f1:	
   420                           ; 1 bytes @ 0x0
   421                           
   422                           
   423                           ; 3 bytes @ 0x0
   424  0020                     	ds	1
   425  0021                     ___awdiv@sign:	
   426                           
   427                           ; 1 bytes @ 0x1
   428  0021                     	ds	1
   429  0022                     ___awdiv@quotient:	
   430                           
   431                           ; 2 bytes @ 0x2
   432  0022                     	ds	1
   433  0023                     ___ftmul@f2:	
   434                           
   435                           ; 3 bytes @ 0x3
   436  0023                     	ds	3
   437  0026                     ??___ftmul:	
   438                           
   439                           ; 1 bytes @ 0x6
   440  0026                     	ds	4
   441  002A                     ___ftmul@exp:	
   442                           
   443                           ; 1 bytes @ 0xA
   444  002A                     	ds	1
   445  002B                     ___ftmul@f3_as_product:	
   446                           
   447                           ; 3 bytes @ 0xB
   448  002B                     	ds	3
   449  002E                     ___ftmul@cntr:	
   450                           
   451                           ; 1 bytes @ 0xE
   452  002E                     	ds	1
   453  002F                     ___ftmul@sign:	
   454                           
   455                           ; 1 bytes @ 0xF
   456  002F                     	ds	1
   457  0030                     ?___fttol:	
   458  0030                     ___fttol@f1:	
   459                           ; 4 bytes @ 0x10
   460                           
   461                           
   462                           ; 3 bytes @ 0x10
   463  0030                     	ds	4
   464  0034                     ??___fttol:	
   465                           
   466                           ; 1 bytes @ 0x14
   467  0034                     	ds	4
   468  0038                     ___fttol@sign1:	
   469                           
   470                           ; 1 bytes @ 0x18
   471  0038                     	ds	1
   472  0039                     ___fttol@lval:	
   473                           
   474                           ; 4 bytes @ 0x19
   475  0039                     	ds	4
   476  003D                     ___fttol@exp1:	
   477                           
   478                           ; 1 bytes @ 0x1D
   479  003D                     	ds	1
   480  003E                     ??_ISR:	
   481                           
   482                           ; 1 bytes @ 0x1E
   483  003E                     	ds	8
   484  0046                     ISR@x2:	
   485                           
   486                           ; 2 bytes @ 0x26
   487  0046                     	ds	2
   488  0048                     ISR@x1:	
   489                           
   490                           ; 2 bytes @ 0x28
   491  0048                     	ds	2
   492  004A                     ISR@x0:	
   493                           
   494                           ; 2 bytes @ 0x2A
   495  004A                     	ds	2
   496  004C                     _ISR$488:	
   497                           
   498                           ; 2 bytes @ 0x2C
   499  004C                     	ds	2
   500  004E                     ISR@dl:	
   501                           
   502                           ; 2 bytes @ 0x2E
   503  004E                     	ds	2
   504  0050                     ISR@x:	
   505                           
   506                           ; 2 bytes @ 0x30
   507  0050                     	ds	2
   508  0052                     ISR@j:	
   509                           
   510                           ; 2 bytes @ 0x32
   511  0052                     	ds	2
   512  0054                     ISR@i:	
   513                           
   514                           ; 2 bytes @ 0x34
   515  0054                     	ds	2
   516                           
   517                           	psect	maintext
   518  0226                     __pmaintext:	
   519 ;;
   520 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   521 ;;
   522 ;; *************** function _main *****************
   523 ;; Defined at:
   524 ;;		line 163 in file "RoadCrossingTrafficLightSystem.c"
   525 ;; Parameters:    Size  Location     Type
   526 ;;		None
   527 ;; Auto vars:     Size  Location     Type
   528 ;;  k               2   36[BANK1 ] int 
   529 ;;  wtc             1   39[BANK1 ] unsigned char 
   530 ;;  atc             1   38[BANK1 ] unsigned char 
   531 ;; Return value:  Size  Location     Type
   532 ;;                  1    wreg      void 
   533 ;; Registers used:
   534 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   535 ;; Tracked objects:
   536 ;;		On entry : B00/0
   537 ;;		On exit  : 0/0
   538 ;;		Unchanged: 0/0
   539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   540 ;;      Params:         0       0       0       0       0
   541 ;;      Locals:         0       0       4       0       0
   542 ;;      Temps:          0       0       3       0       0
   543 ;;      Totals:         0       0       7       0       0
   544 ;;Total ram usage:        7 bytes
   545 ;; Hardware stack levels required when called:    5
   546 ;; This function calls:
   547 ;;		_UART_Data_Ready
   548 ;;		_UART_Init
   549 ;;		_UART_Read
   550 ;;		_UART_Read_Text
   551 ;; This function is called by:
   552 ;;		Startup code after reset
   553 ;; This function uses a non-reentrant model
   554 ;;
   555                           
   556                           
   557                           ;psect for function _main
   558  0226                     _main:	
   559                           
   560                           ;RoadCrossingTrafficLightSystem.c: 165: UART_Init(9600);
   561                           
   562                           ;incstack = 0
   563                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   564  0226  3000               	movlw	0
   565  0227  1683               	bsf	3,5	;RP0=1, select bank1
   566  0228  1303               	bcf	3,6	;RP1=0, select bank1
   567  0229  00B2               	movwf	(UART_Init@baudrate+3)^(0+128)
   568  022A  3000               	movlw	0
   569  022B  00B1               	movwf	(UART_Init@baudrate+2)^(0+128)
   570  022C  3025               	movlw	37
   571  022D  00B0               	movwf	(UART_Init@baudrate+1)^(0+128)
   572  022E  3080               	movlw	128
   573  022F  00AF               	movwf	UART_Init@baudrate^(0+128)
   574  0230  120A  118A  236F  120A  118A  	fcall	_UART_Init
   575                           
   576                           ;RoadCrossingTrafficLightSystem.c: 167: TRISC = 0x00;
   577  0235  1683               	bsf	3,5	;RP0=1, select bank1
   578  0236  1303               	bcf	3,6	;RP1=0, select bank1
   579  0237  0187               	clrf	7	;volatile
   580                           
   581                           ;RoadCrossingTrafficLightSystem.c: 168: TRISD = 0x00;
   582  0238  0188               	clrf	8	;volatile
   583                           
   584                           ;RoadCrossingTrafficLightSystem.c: 170: PORTC = 0x00;
   585  0239  1283               	bcf	3,5	;RP0=0, select bank0
   586  023A  1303               	bcf	3,6	;RP1=0, select bank0
   587  023B  0187               	clrf	7	;volatile
   588                           
   589                           ;RoadCrossingTrafficLightSystem.c: 171: PORTD = 0x00;
   590  023C  0188               	clrf	8	;volatile
   591                           
   592                           ;RoadCrossingTrafficLightSystem.c: 173: TRISB0= 1;
   593  023D  1683               	bsf	3,5	;RP0=1, select bank1
   594  023E  1303               	bcf	3,6	;RP1=0, select bank1
   595  023F  1406               	bsf	6,0	;volatile
   596                           
   597                           ;RoadCrossingTrafficLightSystem.c: 175: TRISB2= 0;
   598  0240  1106               	bcf	6,2	;volatile
   599                           
   600                           ;RoadCrossingTrafficLightSystem.c: 176: RB2 =1;
   601  0241  1283               	bcf	3,5	;RP0=0, select bank0
   602  0242  1303               	bcf	3,6	;RP1=0, select bank0
   603  0243  1506               	bsf	6,2	;volatile
   604                           
   605                           ;RoadCrossingTrafficLightSystem.c: 178: TRISB5= 0;
   606  0244  1683               	bsf	3,5	;RP0=1, select bank1
   607  0245  1303               	bcf	3,6	;RP1=0, select bank1
   608  0246  1286               	bcf	6,5	;volatile
   609                           
   610                           ;RoadCrossingTrafficLightSystem.c: 179: TRISB6= 0;
   611  0247  1306               	bcf	6,6	;volatile
   612                           
   613                           ;RoadCrossingTrafficLightSystem.c: 180: TRISB7= 0;
   614  0248  1386               	bcf	6,7	;volatile
   615                           
   616                           ;RoadCrossingTrafficLightSystem.c: 182: RB5 = 0;
   617  0249  1283               	bcf	3,5	;RP0=0, select bank0
   618  024A  1303               	bcf	3,6	;RP1=0, select bank0
   619  024B  1286               	bcf	6,5	;volatile
   620                           
   621                           ;RoadCrossingTrafficLightSystem.c: 183: RB6 = 0;
   622  024C  1306               	bcf	6,6	;volatile
   623                           
   624                           ;RoadCrossingTrafficLightSystem.c: 184: RB7 = 0;
   625  024D  1386               	bcf	6,7	;volatile
   626                           
   627                           ;RoadCrossingTrafficLightSystem.c: 186: int k =0;
   628  024E  1683               	bsf	3,5	;RP0=1, select bank1
   629  024F  1303               	bcf	3,6	;RP1=0, select bank1
   630  0250  01C4               	clrf	main@k^(0+128)
   631  0251  01C5               	clrf	(main@k+1)^(0+128)
   632  0252                     l1656:	
   633                           ;RoadCrossingTrafficLightSystem.c: 190: while(k<5){
   634                           
   635  0252  0845               	movf	(main@k+1)^(0+128),w
   636  0253  3A80               	xorlw	128
   637  0254  00FF               	movwf	127
   638  0255  3080               	movlw	128
   639  0256  027F               	subwf	127,w
   640  0257  1D03               	skipz
   641  0258  2A5B               	goto	u1955
   642  0259  3005               	movlw	5
   643  025A  0244               	subwf	main@k^(0+128),w
   644  025B                     u1955:	
   645  025B  1803               	btfsc	3,0
   646  025C  2A88               	goto	l129
   647                           
   648                           ;RoadCrossingTrafficLightSystem.c: 192: RB6 = 1;
   649  025D  1283               	bcf	3,5	;RP0=0, select bank0
   650  025E  1303               	bcf	3,6	;RP1=0, select bank0
   651  025F  1706               	bsf	6,6	;volatile
   652                           
   653                           ;RoadCrossingTrafficLightSystem.c: 193: _delay((unsigned long)((500)*(8000000/4000.0)));
   654  0260  3006               	movlw	6
   655  0261  1683               	bsf	3,5	;RP0=1, select bank1
   656  0262  1303               	bcf	3,6	;RP1=0, select bank1
   657  0263  00C3               	movwf	(??_main^(0+128)+2)
   658  0264  3013               	movlw	19
   659  0265  00C2               	movwf	(??_main^(0+128)+1)
   660  0266  30AD               	movlw	173
   661  0267  00C1               	movwf	??_main^(0+128)
   662  0268                     u2037:	
   663  0268  0BC1               	decfsz	??_main^(0+128),f
   664  0269  2A68               	goto	u2037
   665  026A  0BC2               	decfsz	(??_main^(0+128)+1),f
   666  026B  2A68               	goto	u2037
   667  026C  0BC3               	decfsz	(??_main^(0+128)+2),f
   668  026D  2A68               	goto	u2037
   669                           
   670                           ;RoadCrossingTrafficLightSystem.c: 194: RB6 = 0;
   671  026E  1283               	bcf	3,5	;RP0=0, select bank0
   672  026F  1303               	bcf	3,6	;RP1=0, select bank0
   673  0270  1306               	bcf	6,6	;volatile
   674                           
   675                           ;RoadCrossingTrafficLightSystem.c: 195: _delay((unsigned long)((500)*(8000000/4000.0)));
   676  0271  3006               	movlw	6
   677  0272  1683               	bsf	3,5	;RP0=1, select bank1
   678  0273  1303               	bcf	3,6	;RP1=0, select bank1
   679  0274  00C3               	movwf	(??_main^(0+128)+2)
   680  0275  3013               	movlw	19
   681  0276  00C2               	movwf	(??_main^(0+128)+1)
   682  0277  30AD               	movlw	173
   683  0278  00C1               	movwf	??_main^(0+128)
   684  0279                     u2047:	
   685  0279  0BC1               	decfsz	??_main^(0+128),f
   686  027A  2A79               	goto	u2047
   687  027B  0BC2               	decfsz	(??_main^(0+128)+1),f
   688  027C  2A79               	goto	u2047
   689  027D  0BC3               	decfsz	(??_main^(0+128)+2),f
   690  027E  2A79               	goto	u2047
   691                           
   692                           ;RoadCrossingTrafficLightSystem.c: 196: k++;
   693  027F  3001               	movlw	1
   694  0280  1683               	bsf	3,5	;RP0=1, select bank1
   695  0281  1303               	bcf	3,6	;RP1=0, select bank1
   696  0282  07C4               	addwf	main@k^(0+128),f
   697  0283  1803               	skipnc
   698  0284  0AC5               	incf	(main@k+1)^(0+128),f
   699  0285  3000               	movlw	0
   700  0286  07C5               	addwf	(main@k+1)^(0+128),f
   701  0287  2A52               	goto	l1656
   702  0288                     l129:	
   703                           
   704                           ;RoadCrossingTrafficLightSystem.c: 197: }
   705                           ;RoadCrossingTrafficLightSystem.c: 198: RB7 = 1;
   706  0288  1283               	bcf	3,5	;RP0=0, select bank0
   707  0289  1303               	bcf	3,6	;RP1=0, select bank0
   708  028A  1786               	bsf	6,7	;volatile
   709                           
   710                           ;RoadCrossingTrafficLightSystem.c: 200: _delay((unsigned long)((1000)*(8000000/4000.0)))
      +                          ;
   711  028B  300B               	movlw	11
   712  028C  1683               	bsf	3,5	;RP0=1, select bank1
   713  028D  1303               	bcf	3,6	;RP1=0, select bank1
   714  028E  00C3               	movwf	(??_main^(0+128)+2)
   715  028F  3026               	movlw	38
   716  0290  00C2               	movwf	(??_main^(0+128)+1)
   717  0291  305D               	movlw	93
   718  0292  00C1               	movwf	??_main^(0+128)
   719  0293                     u2057:	
   720  0293  0BC1               	decfsz	??_main^(0+128),f
   721  0294  2A93               	goto	u2057
   722  0295  0BC2               	decfsz	(??_main^(0+128)+1),f
   723  0296  2A93               	goto	u2057
   724  0297  0BC3               	decfsz	(??_main^(0+128)+2),f
   725  0298  2A93               	goto	u2057
   726                           
   727                           ;RoadCrossingTrafficLightSystem.c: 202: GIE=1;
   728  0299  178B               	bsf	11,7	;volatile
   729                           
   730                           ;RoadCrossingTrafficLightSystem.c: 203: PEIE=1;
   731  029A  170B               	bsf	11,6	;volatile
   732                           
   733                           ;RoadCrossingTrafficLightSystem.c: 205: INTE=1;
   734  029B  160B               	bsf	11,4	;volatile
   735                           
   736                           ;RoadCrossingTrafficLightSystem.c: 207: char atc = 0;
   737  029C  1683               	bsf	3,5	;RP0=1, select bank1
   738  029D  1303               	bcf	3,6	;RP1=0, select bank1
   739  029E  01C6               	clrf	main@atc^(0+128)
   740                           
   741                           ;RoadCrossingTrafficLightSystem.c: 208: char wtc = 0;
   742  029F  01C7               	clrf	main@wtc^(0+128)
   743  02A0                     l1670:	
   744                           ;RoadCrossingTrafficLightSystem.c: 210: while(1){
   745                           
   746                           
   747                           ;RoadCrossingTrafficLightSystem.c: 212: RB5 = 0;
   748  02A0  1283               	bcf	3,5	;RP0=0, select bank0
   749  02A1  1286               	bcf	6,5	;volatile
   750                           
   751                           ;RoadCrossingTrafficLightSystem.c: 213: RB6 = 0;
   752  02A2  1306               	bcf	6,6	;volatile
   753                           
   754                           ;RoadCrossingTrafficLightSystem.c: 214: RB7 = 1;
   755  02A3  1786               	bsf	6,7	;volatile
   756                           
   757                           ;RoadCrossingTrafficLightSystem.c: 215: _delay((unsigned long)((100)*(8000000/4000.0)));
   758  02A4  3002               	movlw	2
   759  02A5  1683               	bsf	3,5	;RP0=1, select bank1
   760  02A6  1303               	bcf	3,6	;RP1=0, select bank1
   761  02A7  00C3               	movwf	(??_main^(0+128)+2)
   762  02A8  3004               	movlw	4
   763  02A9  00C2               	movwf	(??_main^(0+128)+1)
   764  02AA  30B9               	movlw	185
   765  02AB  00C1               	movwf	??_main^(0+128)
   766  02AC                     u2067:	
   767  02AC  0BC1               	decfsz	??_main^(0+128),f
   768  02AD  2AAC               	goto	u2067
   769  02AE  0BC2               	decfsz	(??_main^(0+128)+1),f
   770  02AF  2AAC               	goto	u2067
   771  02B0  0BC3               	decfsz	(??_main^(0+128)+2),f
   772  02B1  2AAC               	goto	u2067
   773  02B2  2AB3               	nop2
   774                           
   775                           ;RoadCrossingTrafficLightSystem.c: 216: if(UART_Data_Ready()){
   776  02B3  120A  158A  27FA  120A  118A  	fcall	_UART_Data_Ready
   777  02B8  3A00               	xorlw	0
   778  02B9  1903               	skipnz
   779  02BA  2AF2               	goto	l131
   780                           
   781                           ;RoadCrossingTrafficLightSystem.c: 217: if(UART_Read()=='a'){
   782  02BB  120A  118A  27F7  120A  118A  	fcall	_UART_Read
   783  02C0  3A61               	xorlw	97
   784  02C1  1D03               	skipz
   785  02C2  2AD7               	goto	l1684
   786                           
   787                           ;RoadCrossingTrafficLightSystem.c: 218: atc = 1;
   788  02C3  1683               	bsf	3,5	;RP0=1, select bank1
   789  02C4  1303               	bcf	3,6	;RP1=0, select bank1
   790  02C5  01C6               	clrf	main@atc^(0+128)
   791  02C6  0AC6               	incf	main@atc^(0+128),f
   792                           
   793                           ;RoadCrossingTrafficLightSystem.c: 219: _delay((unsigned long)((100)*(8000000/4000.0)));
   794  02C7  3002               	movlw	2
   795  02C8  1683               	bsf	3,5	;RP0=1, select bank1
   796  02C9  1303               	bcf	3,6	;RP1=0, select bank1
   797  02CA  00C3               	movwf	(??_main^(0+128)+2)
   798  02CB  3004               	movlw	4
   799  02CC  00C2               	movwf	(??_main^(0+128)+1)
   800  02CD  30B9               	movlw	185
   801  02CE  00C1               	movwf	??_main^(0+128)
   802  02CF                     u2077:	
   803  02CF  0BC1               	decfsz	??_main^(0+128),f
   804  02D0  2ACF               	goto	u2077
   805  02D1  0BC2               	decfsz	(??_main^(0+128)+1),f
   806  02D2  2ACF               	goto	u2077
   807  02D3  0BC3               	decfsz	(??_main^(0+128)+2),f
   808  02D4  2ACF               	goto	u2077
   809  02D5  2AD6               	nop2
   810                           
   811                           ;RoadCrossingTrafficLightSystem.c: 220: }else if(UART_Read()=='w'){
   812  02D6  2AF2               	goto	l131
   813  02D7                     l1684:	
   814  02D7  120A  118A  27F7  120A  118A  	fcall	_UART_Read
   815  02DC  3A77               	xorlw	119
   816  02DD  1D03               	skipz
   817  02DE  2AF2               	goto	l131
   818                           
   819                           ;RoadCrossingTrafficLightSystem.c: 221: wtc = 1;
   820  02DF  1683               	bsf	3,5	;RP0=1, select bank1
   821  02E0  1303               	bcf	3,6	;RP1=0, select bank1
   822  02E1  01C7               	clrf	main@wtc^(0+128)
   823  02E2  0AC7               	incf	main@wtc^(0+128),f
   824                           
   825                           ;RoadCrossingTrafficLightSystem.c: 222: _delay((unsigned long)((100)*(8000000/4000.0)));
   826  02E3  3002               	movlw	2
   827  02E4  1683               	bsf	3,5	;RP0=1, select bank1
   828  02E5  1303               	bcf	3,6	;RP1=0, select bank1
   829  02E6  00C3               	movwf	(??_main^(0+128)+2)
   830  02E7  3004               	movlw	4
   831  02E8  00C2               	movwf	(??_main^(0+128)+1)
   832  02E9  30B9               	movlw	185
   833  02EA  00C1               	movwf	??_main^(0+128)
   834  02EB                     u2087:	
   835  02EB  0BC1               	decfsz	??_main^(0+128),f
   836  02EC  2AEB               	goto	u2087
   837  02ED  0BC2               	decfsz	(??_main^(0+128)+1),f
   838  02EE  2AEB               	goto	u2087
   839  02EF  0BC3               	decfsz	(??_main^(0+128)+2),f
   840  02F0  2AEB               	goto	u2087
   841  02F1  2AF2               	nop2
   842  02F2                     l131:	
   843                           
   844                           ;RoadCrossingTrafficLightSystem.c: 223: }
   845                           ;RoadCrossingTrafficLightSystem.c: 224: }
   846                           ;RoadCrossingTrafficLightSystem.c: 226: _delay((unsigned long)((1000)*(8000000/4000.0)))
      +                          ;
   847  02F2  300B               	movlw	11
   848  02F3  1683               	bsf	3,5	;RP0=1, select bank1
   849  02F4  1303               	bcf	3,6	;RP1=0, select bank1
   850  02F5  00C3               	movwf	(??_main^(0+128)+2)
   851  02F6  3026               	movlw	38
   852  02F7  00C2               	movwf	(??_main^(0+128)+1)
   853  02F8  305D               	movlw	93
   854  02F9  00C1               	movwf	??_main^(0+128)
   855  02FA                     u2097:	
   856  02FA  0BC1               	decfsz	??_main^(0+128),f
   857  02FB  2AFA               	goto	u2097
   858  02FC  0BC2               	decfsz	(??_main^(0+128)+1),f
   859  02FD  2AFA               	goto	u2097
   860  02FE  0BC3               	decfsz	(??_main^(0+128)+2),f
   861  02FF  2AFA               	goto	u2097
   862                           
   863                           ;RoadCrossingTrafficLightSystem.c: 228: if(UART_Data_Ready()){
   864  0300  120A  158A  27FA  120A  118A  	fcall	_UART_Data_Ready
   865  0305  3A00               	xorlw	0
   866  0306  1903               	skipnz
   867  0307  2B57               	goto	l1712
   868                           
   869                           ;RoadCrossingTrafficLightSystem.c: 229: if(atc == 1){
   870  0308  1683               	bsf	3,5	;RP0=1, select bank1
   871  0309  1303               	bcf	3,6	;RP1=0, select bank1
   872  030A  0346               	decf	main@atc^(0+128),w
   873  030B  1D03               	btfss	3,2
   874  030C  2B30               	goto	l1702
   875                           
   876                           ;RoadCrossingTrafficLightSystem.c: 230: UART_Read_Text(c1,3);
   877  030D  3003               	movlw	3
   878  030E  00A0               	movwf	UART_Read_Text@length^(0+128)
   879  030F  3000               	movlw	0
   880  0310  00A1               	movwf	(UART_Read_Text@length^(0+128)+1)
   881  0311  30CB               	movlw	(low (_c1| 0))& (0+255)
   882  0312  120A  118A  2791  120A  118A  	fcall	_UART_Read_Text
   883                           
   884                           ;RoadCrossingTrafficLightSystem.c: 231: at = c1-'0';
   885  0317  309B               	movlw	(low ((_c1| 0+208)))& (0+255)
   886  0318  1283               	bcf	3,5	;RP0=0, select bank0
   887  0319  1303               	bcf	3,6	;RP1=0, select bank0
   888  031A  00D8               	movwf	_at
   889  031B  3000               	movlw	0
   890  031C  00D9               	movwf	_at+1
   891                           
   892                           ;RoadCrossingTrafficLightSystem.c: 232: atc = 0;
   893  031D  1683               	bsf	3,5	;RP0=1, select bank1
   894  031E  1303               	bcf	3,6	;RP1=0, select bank1
   895  031F  01C6               	clrf	main@atc^(0+128)
   896                           
   897                           ;RoadCrossingTrafficLightSystem.c: 233: _delay((unsigned long)((100)*(8000000/4000.0)));
   898  0320  3002               	movlw	2
   899  0321  1683               	bsf	3,5	;RP0=1, select bank1
   900  0322  1303               	bcf	3,6	;RP1=0, select bank1
   901  0323  00C3               	movwf	(??_main^(0+128)+2)
   902  0324  3004               	movlw	4
   903  0325  00C2               	movwf	(??_main^(0+128)+1)
   904  0326  30B9               	movlw	185
   905  0327  00C1               	movwf	??_main^(0+128)
   906  0328                     u2107:	
   907  0328  0BC1               	decfsz	??_main^(0+128),f
   908  0329  2B28               	goto	u2107
   909  032A  0BC2               	decfsz	(??_main^(0+128)+1),f
   910  032B  2B28               	goto	u2107
   911  032C  0BC3               	decfsz	(??_main^(0+128)+2),f
   912  032D  2B28               	goto	u2107
   913  032E  2B2F               	nop2
   914                           
   915                           ;RoadCrossingTrafficLightSystem.c: 234: }else if(wtc==1){
   916  032F  2B57               	goto	l1712
   917  0330                     l1702:	
   918  0330  1683               	bsf	3,5	;RP0=1, select bank1
   919  0331  1303               	bcf	3,6	;RP1=0, select bank1
   920  0332  0347               	decf	main@wtc^(0+128),w
   921  0333  1D03               	btfss	3,2
   922  0334  2B57               	goto	l1712
   923                           
   924                           ;RoadCrossingTrafficLightSystem.c: 235: UART_Read_Text(c2,3);
   925  0335  3003               	movlw	3
   926  0336  00A0               	movwf	UART_Read_Text@length^(0+128)
   927  0337  3000               	movlw	0
   928  0338  00A1               	movwf	(UART_Read_Text@length^(0+128)+1)
   929  0339  30C8               	movlw	(low (_c2| 0))& (0+255)
   930  033A  120A  118A  2791  120A  118A  	fcall	_UART_Read_Text
   931                           
   932                           ;RoadCrossingTrafficLightSystem.c: 236: wt = c2-'0';
   933  033F  3098               	movlw	(low ((_c2| 0+208)))& (0+255)
   934  0340  1283               	bcf	3,5	;RP0=0, select bank0
   935  0341  1303               	bcf	3,6	;RP1=0, select bank0
   936  0342  00D6               	movwf	_wt
   937  0343  3000               	movlw	0
   938  0344  00D7               	movwf	_wt+1
   939                           
   940                           ;RoadCrossingTrafficLightSystem.c: 237: wtc = 0;
   941  0345  1683               	bsf	3,5	;RP0=1, select bank1
   942  0346  1303               	bcf	3,6	;RP1=0, select bank1
   943  0347  01C7               	clrf	main@wtc^(0+128)
   944                           
   945                           ;RoadCrossingTrafficLightSystem.c: 238: _delay((unsigned long)((100)*(8000000/4000.0)));
   946  0348  3002               	movlw	2
   947  0349  1683               	bsf	3,5	;RP0=1, select bank1
   948  034A  1303               	bcf	3,6	;RP1=0, select bank1
   949  034B  00C3               	movwf	(??_main^(0+128)+2)
   950  034C  3004               	movlw	4
   951  034D  00C2               	movwf	(??_main^(0+128)+1)
   952  034E  30B9               	movlw	185
   953  034F  00C1               	movwf	??_main^(0+128)
   954  0350                     u2117:	
   955  0350  0BC1               	decfsz	??_main^(0+128),f
   956  0351  2B50               	goto	u2117
   957  0352  0BC2               	decfsz	(??_main^(0+128)+1),f
   958  0353  2B50               	goto	u2117
   959  0354  0BC3               	decfsz	(??_main^(0+128)+2),f
   960  0355  2B50               	goto	u2117
   961  0356  2B57               	nop2
   962  0357                     l1712:	
   963                           
   964                           ;RoadCrossingTrafficLightSystem.c: 239: }
   965                           ;RoadCrossingTrafficLightSystem.c: 240: }
   966                           ;RoadCrossingTrafficLightSystem.c: 242: if(en==0){
   967  0357  1283               	bcf	3,5	;RP0=0, select bank0
   968  0358  1303               	bcf	3,6	;RP1=0, select bank0
   969  0359  085C               	movf	_en,w
   970  035A  1D03               	btfss	3,2
   971  035B  2AA0               	goto	l1670
   972                           
   973                           ;RoadCrossingTrafficLightSystem.c: 243: _delay((unsigned long)((5000)*(8000000/4000.0)))
      +                          ;
   974  035C  3033               	movlw	51
   975  035D  1683               	bsf	3,5	;RP0=1, select bank1
   976  035E  1303               	bcf	3,6	;RP1=0, select bank1
   977  035F  00C3               	movwf	(??_main^(0+128)+2)
   978  0360  30BB               	movlw	187
   979  0361  00C2               	movwf	(??_main^(0+128)+1)
   980  0362  30DF               	movlw	223
   981  0363  00C1               	movwf	??_main^(0+128)
   982  0364                     u2127:	
   983  0364  0BC1               	decfsz	??_main^(0+128),f
   984  0365  2B64               	goto	u2127
   985  0366  0BC2               	decfsz	(??_main^(0+128)+1),f
   986  0367  2B64               	goto	u2127
   987  0368  0BC3               	decfsz	(??_main^(0+128)+2),f
   988  0369  2B64               	goto	u2127
   989                           
   990                           ;RoadCrossingTrafficLightSystem.c: 244: en = 1;
   991  036A  1283               	bcf	3,5	;RP0=0, select bank0
   992  036B  1303               	bcf	3,6	;RP1=0, select bank0
   993  036C  01DC               	clrf	_en
   994  036D  0ADC               	incf	_en,f
   995  036E  2AA0               	goto	l1670
   996  036F                     __end_of_main:	
   997                           
   998                           	psect	text1
   999  0791                     __ptext1:	
  1000 ;; *************** function _UART_Read_Text *****************
  1001 ;; Defined at:
  1002 ;;		line 49 in file "RoadCrossingTrafficLightSystem.c"
  1003 ;; Parameters:    Size  Location     Type
  1004 ;;  Output          1    wreg     PTR unsigned char 
  1005 ;;		 -> c2(3), c1(3), 
  1006 ;;  length          2    0[BANK1 ] unsigned int 
  1007 ;; Auto vars:     Size  Location     Type
  1008 ;;  Output          1    4[BANK1 ] PTR unsigned char 
  1009 ;;		 -> c2(3), c1(3), 
  1010 ;;  i               2    5[BANK1 ] int 
  1011 ;;  i               2    0        int 
  1012 ;; Return value:  Size  Location     Type
  1013 ;;                  1    wreg      void 
  1014 ;; Registers used:
  1015 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1016 ;; Tracked objects:
  1017 ;;		On entry : 0/0
  1018 ;;		On exit  : 0/0
  1019 ;;		Unchanged: 0/0
  1020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1021 ;;      Params:         0       0       2       0       0
  1022 ;;      Locals:         0       0       3       0       0
  1023 ;;      Temps:          0       0       2       0       0
  1024 ;;      Totals:         0       0       7       0       0
  1025 ;;Total ram usage:        7 bytes
  1026 ;; Hardware stack levels used:    1
  1027 ;; Hardware stack levels required when called:    4
  1028 ;; This function calls:
  1029 ;;		_UART_Read
  1030 ;; This function is called by:
  1031 ;;		_main
  1032 ;; This function uses a non-reentrant model
  1033 ;;
  1034                           
  1035                           
  1036                           ;psect for function _UART_Read_Text
  1037  0791                     _UART_Read_Text:	
  1038                           
  1039                           ;incstack = 0
  1040                           ; Regs used in _UART_Read_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1041                           ;UART_Read_Text@Output stored from wreg
  1042  0791  1683               	bsf	3,5	;RP0=1, select bank1
  1043  0792  1303               	bcf	3,6	;RP1=0, select bank1
  1044  0793  00A4               	movwf	UART_Read_Text@Output^(0+128)
  1045                           
  1046                           ;RoadCrossingTrafficLightSystem.c: 51: int i;
  1047                           ;RoadCrossingTrafficLightSystem.c: 52: for(int i=0;i<length;i++)
  1048  0794  01A5               	clrf	UART_Read_Text@i_60^(0+128)
  1049  0795  01A6               	clrf	(UART_Read_Text@i_60+1)^(0+128)
  1050  0796                     l1282:	
  1051  0796  0821               	movf	(UART_Read_Text@length+1)^(0+128),w
  1052  0797  0226               	subwf	(UART_Read_Text@i_60+1)^(0+128),w
  1053  0798  1D03               	skipz
  1054  0799  2F9C               	goto	u1335
  1055  079A  0820               	movf	UART_Read_Text@length^(0+128),w
  1056  079B  0225               	subwf	UART_Read_Text@i_60^(0+128),w
  1057  079C                     u1335:	
  1058  079C  1803               	btfsc	3,0
  1059  079D  0008               	return
  1060                           
  1061                           ;RoadCrossingTrafficLightSystem.c: 53: Output[i] = UART_Read();
  1062  079E  120A  118A  27F7  120A  118A  	fcall	_UART_Read
  1063  07A3  1683               	bsf	3,5	;RP0=1, select bank1
  1064  07A4  1303               	bcf	3,6	;RP1=0, select bank1
  1065  07A5  00A2               	movwf	??_UART_Read_Text^(0+128)
  1066  07A6  0825               	movf	UART_Read_Text@i_60^(0+128),w
  1067  07A7  0724               	addwf	UART_Read_Text@Output^(0+128),w
  1068  07A8  00A3               	movwf	(??_UART_Read_Text+1)^(0+128)
  1069  07A9  0823               	movf	(??_UART_Read_Text+1)^(0+128),w
  1070  07AA  0084               	movwf	4
  1071  07AB  0822               	movf	??_UART_Read_Text^(0+128),w
  1072  07AC  1383               	bcf	3,7	;select IRP bank0
  1073  07AD  0080               	movwf	0
  1074  07AE  3001               	movlw	1
  1075  07AF  07A5               	addwf	UART_Read_Text@i_60^(0+128),f
  1076  07B0  1803               	skipnc
  1077  07B1  0AA6               	incf	(UART_Read_Text@i_60+1)^(0+128),f
  1078  07B2  3000               	movlw	0
  1079  07B3  07A6               	addwf	(UART_Read_Text@i_60+1)^(0+128),f
  1080  07B4  2F96               	goto	l1282
  1081  07B5                     __end_of_UART_Read_Text:	
  1082                           
  1083                           	psect	text2
  1084  07F7                     __ptext2:	
  1085 ;; *************** function _UART_Read *****************
  1086 ;; Defined at:
  1087 ;;		line 44 in file "RoadCrossingTrafficLightSystem.c"
  1088 ;; Parameters:    Size  Location     Type
  1089 ;;		None
  1090 ;; Auto vars:     Size  Location     Type
  1091 ;;		None
  1092 ;; Return value:  Size  Location     Type
  1093 ;;                  1    wreg      unsigned char 
  1094 ;; Registers used:
  1095 ;;		wreg
  1096 ;; Tracked objects:
  1097 ;;		On entry : 0/0
  1098 ;;		On exit  : 0/0
  1099 ;;		Unchanged: 0/0
  1100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1101 ;;      Params:         0       0       0       0       0
  1102 ;;      Locals:         0       0       0       0       0
  1103 ;;      Temps:          0       0       0       0       0
  1104 ;;      Totals:         0       0       0       0       0
  1105 ;;Total ram usage:        0 bytes
  1106 ;; Hardware stack levels used:    1
  1107 ;; Hardware stack levels required when called:    3
  1108 ;; This function calls:
  1109 ;;		Nothing
  1110 ;; This function is called by:
  1111 ;;		_UART_Read_Text
  1112 ;;		_main
  1113 ;; This function uses a non-reentrant model
  1114 ;;
  1115                           
  1116                           
  1117                           ;psect for function _UART_Read
  1118  07F7                     _UART_Read:	
  1119  07F7                     l65:	
  1120                           ;RoadCrossingTrafficLightSystem.c: 45: while(!RCIF);
  1121                           
  1122                           ;incstack = 0
  1123                           ; Regs used in _UART_Read: [wreg]
  1124                           
  1125  07F7  1283               	bcf	3,5	;RP0=0, select bank0
  1126  07F8  1303               	bcf	3,6	;RP1=0, select bank0
  1127  07F9  1E8C               	btfss	12,5	;volatile
  1128  07FA  2FF7               	goto	l65
  1129                           
  1130                           ;RoadCrossingTrafficLightSystem.c: 46: return RCREG;
  1131  07FB  081A               	movf	26,w	;volatile
  1132  07FC  0008               	return
  1133  07FD                     __end_of_UART_Read:	
  1134                           
  1135                           	psect	text3
  1136  036F                     __ptext3:	
  1137 ;; *************** function _UART_Init *****************
  1138 ;; Defined at:
  1139 ;;		line 18 in file "RoadCrossingTrafficLightSystem.c"
  1140 ;; Parameters:    Size  Location     Type
  1141 ;;  baudrate        4   15[BANK1 ] const long 
  1142 ;; Auto vars:     Size  Location     Type
  1143 ;;  x               2   31[BANK1 ] unsigned int 
  1144 ;; Return value:  Size  Location     Type
  1145 ;;                  1    wreg      unsigned char 
  1146 ;; Registers used:
  1147 ;;		wreg, status,2, status,0, pclath, cstack
  1148 ;; Tracked objects:
  1149 ;;		On entry : 0/0
  1150 ;;		On exit  : 0/0
  1151 ;;		Unchanged: 0/0
  1152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1153 ;;      Params:         0       0       4       0       0
  1154 ;;      Locals:         0       0       2       0       0
  1155 ;;      Temps:          0       0      12       0       0
  1156 ;;      Totals:         0       0      18       0       0
  1157 ;;Total ram usage:       18 bytes
  1158 ;; Hardware stack levels used:    1
  1159 ;; Hardware stack levels required when called:    4
  1160 ;; This function calls:
  1161 ;;		___aldiv
  1162 ;; This function is called by:
  1163 ;;		_main
  1164 ;; This function uses a non-reentrant model
  1165 ;;
  1166                           
  1167                           
  1168                           ;psect for function _UART_Init
  1169  036F                     _UART_Init:	
  1170                           
  1171                           ;RoadCrossingTrafficLightSystem.c: 20: unsigned int x;
  1172                           ;RoadCrossingTrafficLightSystem.c: 21: x = (8000000 - baudrate*64)/(baudrate*64);
  1173                           
  1174                           ;incstack = 0
  1175                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  1176  036F  1683               	bsf	3,5	;RP0=1, select bank1
  1177  0370  1303               	bcf	3,6	;RP1=0, select bank1
  1178  0371  082F               	movf	UART_Init@baudrate^(0+128),w
  1179  0372  00B3               	movwf	??_UART_Init^(0+128)
  1180  0373  0830               	movf	(UART_Init@baudrate+1)^(0+128),w
  1181  0374  00B4               	movwf	(??_UART_Init^(0+128)+1)
  1182  0375  0831               	movf	(UART_Init@baudrate+2)^(0+128),w
  1183  0376  00B5               	movwf	(??_UART_Init^(0+128)+2)
  1184  0377  0832               	movf	(UART_Init@baudrate+3)^(0+128),w
  1185  0378  00B6               	movwf	(??_UART_Init^(0+128)+3)
  1186  0379  3006               	movlw	6
  1187  037A                     u1255:	
  1188  037A  1003               	clrc
  1189  037B  0DB3               	rlf	??_UART_Init^(0+128),f
  1190  037C  0DB4               	rlf	(??_UART_Init^(0+128)+1),f
  1191  037D  0DB5               	rlf	(??_UART_Init^(0+128)+2),f
  1192  037E  0DB6               	rlf	(??_UART_Init^(0+128)+3),f
  1193  037F  3EFF               	addlw	-1
  1194  0380  1D03               	skipz
  1195  0381  2B7A               	goto	u1255
  1196  0382  0836               	movf	(??_UART_Init+3)^(0+128),w
  1197  0383  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  1198  0384  0835               	movf	(??_UART_Init+2)^(0+128),w
  1199  0385  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  1200  0386  0834               	movf	(??_UART_Init+1)^(0+128),w
  1201  0387  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  1202  0388  0833               	movf	??_UART_Init^(0+128),w
  1203  0389  00A0               	movwf	___aldiv@divisor^(0+128)
  1204  038A  3000               	movlw	0
  1205  038B  00B7               	movwf	(??_UART_Init+4)^(0+128)
  1206  038C  3012               	movlw	18
  1207  038D  00B8               	movwf	((??_UART_Init+4)^(0+128)+1)
  1208  038E  307A               	movlw	122
  1209  038F  00B9               	movwf	((??_UART_Init+4)^(0+128)+2)
  1210  0390  3000               	movlw	0
  1211  0391  00BA               	movwf	((??_UART_Init+4)^(0+128)+3)
  1212  0392  082F               	movf	UART_Init@baudrate^(0+128),w
  1213  0393  00BB               	movwf	(??_UART_Init+8)^(0+128)
  1214  0394  0830               	movf	(UART_Init@baudrate+1)^(0+128),w
  1215  0395  00BC               	movwf	((??_UART_Init+8)^(0+128)+1)
  1216  0396  0831               	movf	(UART_Init@baudrate+2)^(0+128),w
  1217  0397  00BD               	movwf	((??_UART_Init+8)^(0+128)+2)
  1218  0398  0832               	movf	(UART_Init@baudrate+3)^(0+128),w
  1219  0399  00BE               	movwf	((??_UART_Init+8)^(0+128)+3)
  1220  039A  3006               	movlw	6
  1221  039B                     u1265:	
  1222  039B  1003               	clrc
  1223  039C  0DBB               	rlf	(??_UART_Init+8)^(0+128),f
  1224  039D  0DBC               	rlf	((??_UART_Init+8)^(0+128)+1),f
  1225  039E  0DBD               	rlf	((??_UART_Init+8)^(0+128)+2),f
  1226  039F  0DBE               	rlf	((??_UART_Init+8)^(0+128)+3),f
  1227  03A0  3EFF               	addlw	-1
  1228  03A1  1D03               	skipz
  1229  03A2  2B9B               	goto	u1265
  1230  03A3  09BB               	comf	(??_UART_Init+8)^(0+128),f
  1231  03A4  09BC               	comf	((??_UART_Init+8)^(0+128)+1),f
  1232  03A5  09BD               	comf	((??_UART_Init+8)^(0+128)+2),f
  1233  03A6  09BE               	comf	((??_UART_Init+8)^(0+128)+3),f
  1234  03A7  0ABB               	incf	(??_UART_Init+8)^(0+128),f
  1235  03A8  1903               	skipnz
  1236  03A9  0ABC               	incf	((??_UART_Init+8)^(0+128)+1),f
  1237  03AA  1903               	skipnz
  1238  03AB  0ABD               	incf	((??_UART_Init+8)^(0+128)+2),f
  1239  03AC  1903               	skipnz
  1240  03AD  0ABE               	incf	((??_UART_Init+8)^(0+128)+3),f
  1241  03AE  083B               	movf	(??_UART_Init+8)^(0+128),w
  1242  03AF  07B7               	addwf	(??_UART_Init+4)^(0+128),f
  1243  03B0  083C               	movf	(??_UART_Init+9)^(0+128),w
  1244  03B1  1803               	skipnc
  1245  03B2  0F3C               	incfsz	(??_UART_Init+9)^(0+128),w
  1246  03B3  2BB5               	goto	u1270
  1247  03B4  2BB6               	goto	u1271
  1248  03B5                     u1270:	
  1249  03B5  07B8               	addwf	((??_UART_Init+4)^(0+128)+1),f
  1250  03B6                     u1271:	
  1251  03B6  083D               	movf	(??_UART_Init+10)^(0+128),w
  1252  03B7  1803               	skipnc
  1253  03B8  0F3D               	incfsz	(??_UART_Init+10)^(0+128),w
  1254  03B9  2BBB               	goto	u1272
  1255  03BA  2BBC               	goto	u1273
  1256  03BB                     u1272:	
  1257  03BB  07B9               	addwf	((??_UART_Init+4)^(0+128)+2),f
  1258  03BC                     u1273:	
  1259  03BC  083E               	movf	(??_UART_Init+11)^(0+128),w
  1260  03BD  1803               	skipnc
  1261  03BE  0A3E               	incf	(??_UART_Init+11)^(0+128),w
  1262  03BF  07BA               	addwf	((??_UART_Init+4)^(0+128)+3),f
  1263  03C0  083A               	movf	(??_UART_Init+7)^(0+128),w
  1264  03C1  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  1265  03C2  0839               	movf	(??_UART_Init+6)^(0+128),w
  1266  03C3  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  1267  03C4  0838               	movf	(??_UART_Init+5)^(0+128),w
  1268  03C5  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  1269  03C6  0837               	movf	(??_UART_Init+4)^(0+128),w
  1270  03C7  00A4               	movwf	___aldiv@dividend^(0+128)
  1271  03C8  120A  118A  2527  120A  118A  	fcall	___aldiv
  1272  03CD  1683               	bsf	3,5	;RP0=1, select bank1
  1273  03CE  1303               	bcf	3,6	;RP1=0, select bank1
  1274  03CF  0821               	movf	(?___aldiv+1)^(0+128),w
  1275  03D0  00C0               	movwf	(UART_Init@x+1)^(0+128)
  1276  03D1  0820               	movf	?___aldiv^(0+128),w
  1277  03D2  00BF               	movwf	UART_Init@x^(0+128)
  1278                           
  1279                           ;RoadCrossingTrafficLightSystem.c: 23: if(x>255){
  1280  03D3  3001               	movlw	1
  1281  03D4  0240               	subwf	(UART_Init@x+1)^(0+128),w
  1282  03D5  3000               	movlw	0
  1283  03D6  1903               	skipnz
  1284  03D7  023F               	subwf	UART_Init@x^(0+128),w
  1285  03D8  1C03               	skipc
  1286  03D9  2C3D               	goto	l1256
  1287                           
  1288                           ;RoadCrossingTrafficLightSystem.c: 24: x = (8000000 - baudrate*16)/(baudrate*16);
  1289  03DA  082F               	movf	UART_Init@baudrate^(0+128),w
  1290  03DB  00B3               	movwf	??_UART_Init^(0+128)
  1291  03DC  0830               	movf	(UART_Init@baudrate+1)^(0+128),w
  1292  03DD  00B4               	movwf	(??_UART_Init^(0+128)+1)
  1293  03DE  0831               	movf	(UART_Init@baudrate+2)^(0+128),w
  1294  03DF  00B5               	movwf	(??_UART_Init^(0+128)+2)
  1295  03E0  0832               	movf	(UART_Init@baudrate+3)^(0+128),w
  1296  03E1  00B6               	movwf	(??_UART_Init^(0+128)+3)
  1297  03E2  3004               	movlw	4
  1298  03E3                     u1295:	
  1299  03E3  1003               	clrc
  1300  03E4  0DB3               	rlf	??_UART_Init^(0+128),f
  1301  03E5  0DB4               	rlf	(??_UART_Init^(0+128)+1),f
  1302  03E6  0DB5               	rlf	(??_UART_Init^(0+128)+2),f
  1303  03E7  0DB6               	rlf	(??_UART_Init^(0+128)+3),f
  1304  03E8  3EFF               	addlw	-1
  1305  03E9  1D03               	skipz
  1306  03EA  2BE3               	goto	u1295
  1307  03EB  0836               	movf	(??_UART_Init+3)^(0+128),w
  1308  03EC  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  1309  03ED  0835               	movf	(??_UART_Init+2)^(0+128),w
  1310  03EE  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  1311  03EF  0834               	movf	(??_UART_Init+1)^(0+128),w
  1312  03F0  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  1313  03F1  0833               	movf	??_UART_Init^(0+128),w
  1314  03F2  00A0               	movwf	___aldiv@divisor^(0+128)
  1315  03F3  3000               	movlw	0
  1316  03F4  00B7               	movwf	(??_UART_Init+4)^(0+128)
  1317  03F5  3012               	movlw	18
  1318  03F6  00B8               	movwf	((??_UART_Init+4)^(0+128)+1)
  1319  03F7  307A               	movlw	122
  1320  03F8  00B9               	movwf	((??_UART_Init+4)^(0+128)+2)
  1321  03F9  3000               	movlw	0
  1322  03FA  00BA               	movwf	((??_UART_Init+4)^(0+128)+3)
  1323  03FB  082F               	movf	UART_Init@baudrate^(0+128),w
  1324  03FC  00BB               	movwf	(??_UART_Init+8)^(0+128)
  1325  03FD  0830               	movf	(UART_Init@baudrate+1)^(0+128),w
  1326  03FE  00BC               	movwf	((??_UART_Init+8)^(0+128)+1)
  1327  03FF  0831               	movf	(UART_Init@baudrate+2)^(0+128),w
  1328  0400  00BD               	movwf	((??_UART_Init+8)^(0+128)+2)
  1329  0401  0832               	movf	(UART_Init@baudrate+3)^(0+128),w
  1330  0402  00BE               	movwf	((??_UART_Init+8)^(0+128)+3)
  1331  0403  3004               	movlw	4
  1332  0404                     u1305:	
  1333  0404  1003               	clrc
  1334  0405  0DBB               	rlf	(??_UART_Init+8)^(0+128),f
  1335  0406  0DBC               	rlf	((??_UART_Init+8)^(0+128)+1),f
  1336  0407  0DBD               	rlf	((??_UART_Init+8)^(0+128)+2),f
  1337  0408  0DBE               	rlf	((??_UART_Init+8)^(0+128)+3),f
  1338  0409  3EFF               	addlw	-1
  1339  040A  1D03               	skipz
  1340  040B  2C04               	goto	u1305
  1341  040C  09BB               	comf	(??_UART_Init+8)^(0+128),f
  1342  040D  09BC               	comf	((??_UART_Init+8)^(0+128)+1),f
  1343  040E  09BD               	comf	((??_UART_Init+8)^(0+128)+2),f
  1344  040F  09BE               	comf	((??_UART_Init+8)^(0+128)+3),f
  1345  0410  0ABB               	incf	(??_UART_Init+8)^(0+128),f
  1346  0411  1903               	skipnz
  1347  0412  0ABC               	incf	((??_UART_Init+8)^(0+128)+1),f
  1348  0413  1903               	skipnz
  1349  0414  0ABD               	incf	((??_UART_Init+8)^(0+128)+2),f
  1350  0415  1903               	skipnz
  1351  0416  0ABE               	incf	((??_UART_Init+8)^(0+128)+3),f
  1352  0417  083B               	movf	(??_UART_Init+8)^(0+128),w
  1353  0418  07B7               	addwf	(??_UART_Init+4)^(0+128),f
  1354  0419  083C               	movf	(??_UART_Init+9)^(0+128),w
  1355  041A  1803               	skipnc
  1356  041B  0F3C               	incfsz	(??_UART_Init+9)^(0+128),w
  1357  041C  2C1E               	goto	u1310
  1358  041D  2C1F               	goto	u1311
  1359  041E                     u1310:	
  1360  041E  07B8               	addwf	((??_UART_Init+4)^(0+128)+1),f
  1361  041F                     u1311:	
  1362  041F  083D               	movf	(??_UART_Init+10)^(0+128),w
  1363  0420  1803               	skipnc
  1364  0421  0F3D               	incfsz	(??_UART_Init+10)^(0+128),w
  1365  0422  2C24               	goto	u1312
  1366  0423  2C25               	goto	u1313
  1367  0424                     u1312:	
  1368  0424  07B9               	addwf	((??_UART_Init+4)^(0+128)+2),f
  1369  0425                     u1313:	
  1370  0425  083E               	movf	(??_UART_Init+11)^(0+128),w
  1371  0426  1803               	skipnc
  1372  0427  0A3E               	incf	(??_UART_Init+11)^(0+128),w
  1373  0428  07BA               	addwf	((??_UART_Init+4)^(0+128)+3),f
  1374  0429  083A               	movf	(??_UART_Init+7)^(0+128),w
  1375  042A  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  1376  042B  0839               	movf	(??_UART_Init+6)^(0+128),w
  1377  042C  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  1378  042D  0838               	movf	(??_UART_Init+5)^(0+128),w
  1379  042E  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  1380  042F  0837               	movf	(??_UART_Init+4)^(0+128),w
  1381  0430  00A4               	movwf	___aldiv@dividend^(0+128)
  1382  0431  120A  118A  2527  120A  118A  	fcall	___aldiv
  1383  0436  1683               	bsf	3,5	;RP0=1, select bank1
  1384  0437  1303               	bcf	3,6	;RP1=0, select bank1
  1385  0438  0821               	movf	(?___aldiv+1)^(0+128),w
  1386  0439  00C0               	movwf	(UART_Init@x+1)^(0+128)
  1387  043A  0820               	movf	?___aldiv^(0+128),w
  1388  043B  00BF               	movwf	UART_Init@x^(0+128)
  1389                           
  1390                           ;RoadCrossingTrafficLightSystem.c: 25: BRGH = 1;
  1391  043C  1518               	bsf	24,2	;volatile
  1392  043D                     l1256:	
  1393                           
  1394                           ;RoadCrossingTrafficLightSystem.c: 26: }
  1395                           ;RoadCrossingTrafficLightSystem.c: 27: if(x<256){
  1396  043D  3001               	movlw	1
  1397  043E  0240               	subwf	(UART_Init@x+1)^(0+128),w
  1398  043F  3000               	movlw	0
  1399  0440  1903               	skipnz
  1400  0441  023F               	subwf	UART_Init@x^(0+128),w
  1401  0442  1803               	skipnc
  1402  0443  0008               	return
  1403                           
  1404                           ;RoadCrossingTrafficLightSystem.c: 28: SPBRG = x;
  1405  0444  083F               	movf	UART_Init@x^(0+128),w
  1406  0445  0099               	movwf	25	;volatile
  1407                           
  1408                           ;RoadCrossingTrafficLightSystem.c: 29: SYNC = 0;
  1409  0446  1218               	bcf	24,4	;volatile
  1410                           
  1411                           ;RoadCrossingTrafficLightSystem.c: 30: SPEN = 1;
  1412  0447  1283               	bcf	3,5	;RP0=0, select bank0
  1413  0448  1303               	bcf	3,6	;RP1=0, select bank0
  1414  0449  1798               	bsf	24,7	;volatile
  1415                           
  1416                           ;RoadCrossingTrafficLightSystem.c: 31: TRISC7 = 1;
  1417  044A  1683               	bsf	3,5	;RP0=1, select bank1
  1418  044B  1303               	bcf	3,6	;RP1=0, select bank1
  1419  044C  1787               	bsf	7,7	;volatile
  1420                           
  1421                           ;RoadCrossingTrafficLightSystem.c: 33: CREN = 1;
  1422  044D  1283               	bcf	3,5	;RP0=0, select bank0
  1423  044E  1303               	bcf	3,6	;RP1=0, select bank0
  1424  044F  1618               	bsf	24,4	;volatile
  1425                           
  1426                           ;RoadCrossingTrafficLightSystem.c: 34: TXEN = 1;
  1427  0450  1683               	bsf	3,5	;RP0=1, select bank1
  1428  0451  1303               	bcf	3,6	;RP1=0, select bank1
  1429  0452  1698               	bsf	24,5	;volatile
  1430                           
  1431                           ;RoadCrossingTrafficLightSystem.c: 35: return 1;
  1432                           ;	Return value of _UART_Init is never used
  1433  0453  0008               	return
  1434  0454                     __end_of_UART_Init:	
  1435                           ;RoadCrossingTrafficLightSystem.c: 36: }
  1436                           ;RoadCrossingTrafficLightSystem.c: 37: return 0;
  1437                           ;	Return value of _UART_Init is never used
  1438                           
  1439                           
  1440                           	psect	text4
  1441  0527                     __ptext4:	
  1442 ;; *************** function ___aldiv *****************
  1443 ;; Defined at:
  1444 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\aldiv.c"
  1445 ;; Parameters:    Size  Location     Type
  1446 ;;  divisor         4    0[BANK1 ] long 
  1447 ;;  dividend        4    4[BANK1 ] long 
  1448 ;; Auto vars:     Size  Location     Type
  1449 ;;  quotient        4   11[BANK1 ] long 
  1450 ;;  sign            1   10[BANK1 ] unsigned char 
  1451 ;;  counter         1    9[BANK1 ] unsigned char 
  1452 ;; Return value:  Size  Location     Type
  1453 ;;                  4    0[BANK1 ] long 
  1454 ;; Registers used:
  1455 ;;		wreg, status,2, status,0
  1456 ;; Tracked objects:
  1457 ;;		On entry : 0/0
  1458 ;;		On exit  : 0/0
  1459 ;;		Unchanged: 0/0
  1460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1461 ;;      Params:         0       0       8       0       0
  1462 ;;      Locals:         0       0       6       0       0
  1463 ;;      Temps:          0       0       1       0       0
  1464 ;;      Totals:         0       0      15       0       0
  1465 ;;Total ram usage:       15 bytes
  1466 ;; Hardware stack levels used:    1
  1467 ;; Hardware stack levels required when called:    3
  1468 ;; This function calls:
  1469 ;;		Nothing
  1470 ;; This function is called by:
  1471 ;;		_UART_Init
  1472 ;; This function uses a non-reentrant model
  1473 ;;
  1474                           
  1475                           
  1476                           ;psect for function ___aldiv
  1477  0527                     ___aldiv:	
  1478                           
  1479                           ;incstack = 0
  1480                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1481  0527  1683               	bsf	3,5	;RP0=1, select bank1
  1482  0528  1303               	bcf	3,6	;RP1=0, select bank1
  1483  0529  01AA               	clrf	___aldiv@sign^(0+128)
  1484  052A  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  1485  052B  2D39               	goto	l281
  1486  052C  09A0               	comf	___aldiv@divisor^(0+128),f
  1487  052D  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  1488  052E  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  1489  052F  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  1490  0530  0AA0               	incf	___aldiv@divisor^(0+128),f
  1491  0531  1903               	skipnz
  1492  0532  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  1493  0533  1903               	skipnz
  1494  0534  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  1495  0535  1903               	skipnz
  1496  0536  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  1497  0537  01AA               	clrf	___aldiv@sign^(0+128)
  1498  0538  0AAA               	incf	___aldiv@sign^(0+128),f
  1499  0539                     l281:	
  1500  0539  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  1501  053A  2D4A               	goto	l1218
  1502  053B  09A4               	comf	___aldiv@dividend^(0+128),f
  1503  053C  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  1504  053D  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  1505  053E  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  1506  053F  0AA4               	incf	___aldiv@dividend^(0+128),f
  1507  0540  1903               	skipnz
  1508  0541  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  1509  0542  1903               	skipnz
  1510  0543  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  1511  0544  1903               	skipnz
  1512  0545  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  1513  0546  3001               	movlw	1
  1514  0547  00A8               	movwf	??___aldiv^(0+128)
  1515  0548  0828               	movf	??___aldiv^(0+128),w
  1516  0549  06AA               	xorwf	___aldiv@sign^(0+128),f
  1517  054A                     l1218:	
  1518  054A  3000               	movlw	0
  1519  054B  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  1520  054C  3000               	movlw	0
  1521  054D  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  1522  054E  3000               	movlw	0
  1523  054F  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  1524  0550  3000               	movlw	0
  1525  0551  00AB               	movwf	___aldiv@quotient^(0+128)
  1526  0552  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  1527  0553  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  1528  0554  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  1529  0555  0420               	iorwf	___aldiv@divisor^(0+128),w
  1530  0556  1903               	skipnz
  1531  0557  2D9F               	goto	l1240
  1532  0558  01A9               	clrf	___aldiv@counter^(0+128)
  1533  0559  0AA9               	incf	___aldiv@counter^(0+128),f
  1534  055A                     l1226:	
  1535  055A  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  1536  055B  2D6A               	goto	l1228
  1537  055C  3001               	movlw	1
  1538  055D  00A8               	movwf	??___aldiv^(0+128)
  1539  055E                     u1185:	
  1540  055E  1003               	clrc
  1541  055F  0DA0               	rlf	___aldiv@divisor^(0+128),f
  1542  0560  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  1543  0561  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  1544  0562  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  1545  0563  0BA8               	decfsz	??___aldiv^(0+128),f
  1546  0564  2D5E               	goto	u1185
  1547  0565  3001               	movlw	1
  1548  0566  00A8               	movwf	??___aldiv^(0+128)
  1549  0567  0828               	movf	??___aldiv^(0+128),w
  1550  0568  07A9               	addwf	___aldiv@counter^(0+128),f
  1551  0569  2D5A               	goto	l1226
  1552  056A                     l1228:	
  1553  056A  3001               	movlw	1
  1554  056B  00A8               	movwf	??___aldiv^(0+128)
  1555  056C                     u1205:	
  1556  056C  1003               	clrc
  1557  056D  0DAB               	rlf	___aldiv@quotient^(0+128),f
  1558  056E  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  1559  056F  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  1560  0570  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  1561  0571  0BA8               	decfsz	??___aldiv^(0+128),f
  1562  0572  2D6C               	goto	u1205
  1563  0573  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  1564  0574  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  1565  0575  1D03               	skipz
  1566  0576  2D81               	goto	u1215
  1567  0577  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  1568  0578  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  1569  0579  1D03               	skipz
  1570  057A  2D81               	goto	u1215
  1571  057B  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  1572  057C  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  1573  057D  1D03               	skipz
  1574  057E  2D81               	goto	u1215
  1575  057F  0820               	movf	___aldiv@divisor^(0+128),w
  1576  0580  0224               	subwf	___aldiv@dividend^(0+128),w
  1577  0581                     u1215:	
  1578  0581  1C03               	skipc
  1579  0582  2D92               	goto	l1236
  1580  0583  0820               	movf	___aldiv@divisor^(0+128),w
  1581  0584  02A4               	subwf	___aldiv@dividend^(0+128),f
  1582  0585  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  1583  0586  1C03               	skipc
  1584  0587  0F21               	incfsz	(___aldiv@divisor+1)^(0+128),w
  1585  0588  02A5               	subwf	(___aldiv@dividend+1)^(0+128),f
  1586  0589  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  1587  058A  1C03               	skipc
  1588  058B  0F22               	incfsz	(___aldiv@divisor+2)^(0+128),w
  1589  058C  02A6               	subwf	(___aldiv@dividend+2)^(0+128),f
  1590  058D  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  1591  058E  1C03               	skipc
  1592  058F  0F23               	incfsz	(___aldiv@divisor+3)^(0+128),w
  1593  0590  02A7               	subwf	(___aldiv@dividend+3)^(0+128),f
  1594  0591  142B               	bsf	___aldiv@quotient^(0+128),0
  1595  0592                     l1236:	
  1596  0592  3001               	movlw	1
  1597  0593                     u1225:	
  1598  0593  1003               	clrc
  1599  0594  0CA3               	rrf	(___aldiv@divisor+3)^(0+128),f
  1600  0595  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  1601  0596  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  1602  0597  0CA0               	rrf	___aldiv@divisor^(0+128),f
  1603  0598  3EFF               	addlw	-1
  1604  0599  1D03               	skipz
  1605  059A  2D93               	goto	u1225
  1606  059B  3001               	movlw	1
  1607  059C  02A9               	subwf	___aldiv@counter^(0+128),f
  1608  059D  1D03               	btfss	3,2
  1609  059E  2D6A               	goto	l1228
  1610  059F                     l1240:	
  1611  059F  082A               	movf	___aldiv@sign^(0+128),w
  1612  05A0  1903               	btfsc	3,2
  1613  05A1  2DAD               	goto	l1244
  1614  05A2  09AB               	comf	___aldiv@quotient^(0+128),f
  1615  05A3  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  1616  05A4  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  1617  05A5  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  1618  05A6  0AAB               	incf	___aldiv@quotient^(0+128),f
  1619  05A7  1903               	skipnz
  1620  05A8  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  1621  05A9  1903               	skipnz
  1622  05AA  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  1623  05AB  1903               	skipnz
  1624  05AC  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  1625  05AD                     l1244:	
  1626  05AD  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  1627  05AE  00A3               	movwf	(?___aldiv+3)^(0+128)
  1628  05AF  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  1629  05B0  00A2               	movwf	(?___aldiv+2)^(0+128)
  1630  05B1  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  1631  05B2  00A1               	movwf	(?___aldiv+1)^(0+128)
  1632  05B3  082B               	movf	___aldiv@quotient^(0+128),w
  1633  05B4  00A0               	movwf	?___aldiv^(0+128)
  1634  05B5  0008               	return
  1635  05B6                     __end_of___aldiv:	
  1636                           
  1637                           	psect	text5
  1638  0FFA                     __ptext5:	
  1639 ;; *************** function _UART_Data_Ready *****************
  1640 ;; Defined at:
  1641 ;;		line 40 in file "RoadCrossingTrafficLightSystem.c"
  1642 ;; Parameters:    Size  Location     Type
  1643 ;;		None
  1644 ;; Auto vars:     Size  Location     Type
  1645 ;;		None
  1646 ;; Return value:  Size  Location     Type
  1647 ;;                  1    wreg      unsigned char 
  1648 ;; Registers used:
  1649 ;;		wreg
  1650 ;; Tracked objects:
  1651 ;;		On entry : 0/0
  1652 ;;		On exit  : 0/0
  1653 ;;		Unchanged: 0/0
  1654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1655 ;;      Params:         0       0       0       0       0
  1656 ;;      Locals:         0       0       0       0       0
  1657 ;;      Temps:          0       0       0       0       0
  1658 ;;      Totals:         0       0       0       0       0
  1659 ;;Total ram usage:        0 bytes
  1660 ;; Hardware stack levels used:    1
  1661 ;; Hardware stack levels required when called:    3
  1662 ;; This function calls:
  1663 ;;		Nothing
  1664 ;; This function is called by:
  1665 ;;		_main
  1666 ;; This function uses a non-reentrant model
  1667 ;;
  1668                           
  1669                           
  1670                           ;psect for function _UART_Data_Ready
  1671  0FFA                     _UART_Data_Ready:	
  1672                           
  1673                           ;RoadCrossingTrafficLightSystem.c: 41: return RCIF;
  1674                           
  1675                           ;incstack = 0
  1676                           ; Regs used in _UART_Data_Ready: [wreg]
  1677  0FFA  3000               	movlw	0
  1678  0FFB  1283               	bcf	3,5	;RP0=0, select bank0
  1679  0FFC  1303               	bcf	3,6	;RP1=0, select bank0
  1680  0FFD  1A8C               	btfsc	12,5	;volatile
  1681  0FFE  3001               	movlw	1
  1682  0FFF  0008               	return
  1683  1000                     __end_of_UART_Data_Ready:	
  1684                           
  1685                           	psect	text6
  1686  003C                     __ptext6:	
  1687 ;; *************** function _ISR *****************
  1688 ;; Defined at:
  1689 ;;		line 85 in file "RoadCrossingTrafficLightSystem.c"
  1690 ;; Parameters:    Size  Location     Type
  1691 ;;		None
  1692 ;; Auto vars:     Size  Location     Type
  1693 ;;  j               2   50[BANK0 ] int 
  1694 ;;  x0              2   42[BANK0 ] int 
  1695 ;;  x1              2   40[BANK0 ] int 
  1696 ;;  x2              2   38[BANK0 ] int 
  1697 ;;  i               2   52[BANK0 ] int 
  1698 ;;  dl              2   46[BANK0 ] int 
  1699 ;;  x               2   48[BANK0 ] int 
  1700 ;; Return value:  Size  Location     Type
  1701 ;;                  1    wreg      void 
  1702 ;; Registers used:
  1703 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1704 ;; Tracked objects:
  1705 ;;		On entry : 0/0
  1706 ;;		On exit  : 0/0
  1707 ;;		Unchanged: 0/0
  1708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1709 ;;      Params:         0       0       0       0       0
  1710 ;;      Locals:         0      16       0       0       0
  1711 ;;      Temps:          0       8       0       0       0
  1712 ;;      Totals:         0      24       0       0       0
  1713 ;;Total ram usage:       24 bytes
  1714 ;; Hardware stack levels used:    1
  1715 ;; Hardware stack levels required when called:    2
  1716 ;; This function calls:
  1717 ;;		___awdiv
  1718 ;;		___awmod
  1719 ;;		___awtoft
  1720 ;;		___ftmul
  1721 ;;		___fttol
  1722 ;;		___wmul
  1723 ;;		_decTo7Seg
  1724 ;; This function is called by:
  1725 ;;		Interrupt level 1
  1726 ;; This function uses a non-reentrant model
  1727 ;;
  1728                           
  1729                           
  1730                           ;psect for function _ISR
  1731  003C                     _ISR:	
  1732                           
  1733                           ;RoadCrossingTrafficLightSystem.c: 87: if((INTF == 1)){
  1734  003C  1C8B               	btfss	11,1	;volatile
  1735  003D  2A1B               	goto	i1l122
  1736                           
  1737                           ;RoadCrossingTrafficLightSystem.c: 89: if(en!=0){
  1738  003E  085C               	movf	_en,w
  1739  003F  1903               	btfsc	3,2
  1740  0040  2850               	goto	i1l1540
  1741                           
  1742                           ;RoadCrossingTrafficLightSystem.c: 90: _delay((unsigned long)((5000)*(8000000/4000.0)));
  1743  0041  3033               	movlw	51
  1744  0042  1283               	bcf	3,5	;RP0=0, select bank0
  1745  0043  1303               	bcf	3,6	;RP1=0, select bank0
  1746  0044  00C0               	movwf	??_ISR+2
  1747  0045  30BB               	movlw	187
  1748  0046  00BF               	movwf	??_ISR+1
  1749  0047  30DF               	movlw	223
  1750  0048  00BE               	movwf	??_ISR
  1751  0049                     u213_27:	
  1752  0049  0BBE               	decfsz	??_ISR,f
  1753  004A  2849               	goto	u213_27
  1754  004B  0BBF               	decfsz	??_ISR+1,f
  1755  004C  2849               	goto	u213_27
  1756  004D  0BC0               	decfsz	??_ISR+2,f
  1757  004E  2849               	goto	u213_27
  1758                           
  1759                           ;RoadCrossingTrafficLightSystem.c: 91: }else if(en==0){
  1760  004F  28EA               	goto	i1l1544
  1761  0050                     i1l1540:	
  1762  0050  1283               	bcf	3,5	;RP0=0, select bank0
  1763  0051  1303               	bcf	3,6	;RP1=0, select bank0
  1764  0052  085C               	movf	_en,w
  1765  0053  1D03               	btfss	3,2
  1766  0054  28EA               	goto	i1l1544
  1767                           
  1768                           ;RoadCrossingTrafficLightSystem.c: 92: int dl = wt/2;
  1769  0055  3002               	movlw	2
  1770  0056  00F7               	movwf	___awdiv@divisor
  1771  0057  3000               	movlw	0
  1772  0058  00F8               	movwf	___awdiv@divisor+1
  1773  0059  0857               	movf	_wt+1,w
  1774  005A  00FA               	movwf	___awdiv@dividend+1
  1775  005B  0856               	movf	_wt,w
  1776  005C  00F9               	movwf	___awdiv@dividend
  1777  005D  120A  118A  26B0  120A  118A  	fcall	___awdiv
  1778  0062  0878               	movf	?___awdiv+1,w
  1779  0063  1283               	bcf	3,5	;RP0=0, select bank0
  1780  0064  1303               	bcf	3,6	;RP1=0, select bank0
  1781  0065  00CF               	movwf	ISR@dl+1
  1782  0066  0877               	movf	?___awdiv,w
  1783  0067  00CE               	movwf	ISR@dl
  1784                           
  1785                           ;RoadCrossingTrafficLightSystem.c: 93: _delay((unsigned long)((dl*1000)*(8000000/4000.0)
      +                          ));
  1786  0068  30E8               	movlw	232
  1787  0069  00F2               	movwf	___wmul@multiplicand
  1788  006A  3003               	movlw	3
  1789  006B  00F3               	movwf	___wmul@multiplicand+1
  1790  006C  084F               	movf	ISR@dl+1,w
  1791  006D  00F1               	movwf	___wmul@multiplier+1
  1792  006E  084E               	movf	ISR@dl,w
  1793  006F  00F0               	movwf	___wmul@multiplier
  1794  0070  120A  118A  27B5  120A  118A  	fcall	___wmul
  1795  0075  0871               	movf	?___wmul+1,w
  1796  0076  00F9               	movwf	___awtoft@c+1
  1797  0077  0870               	movf	?___wmul,w
  1798  0078  00F8               	movwf	___awtoft@c
  1799  0079  120A  118A  27D6  120A  118A  	fcall	___awtoft
  1800  007E  0878               	movf	?___awtoft,w
  1801  007F  1283               	bcf	3,5	;RP0=0, select bank0
  1802  0080  1303               	bcf	3,6	;RP1=0, select bank0
  1803  0081  00A3               	movwf	___ftmul@f2
  1804  0082  0879               	movf	?___awtoft+1,w
  1805  0083  00A4               	movwf	___ftmul@f2+1
  1806  0084  087A               	movf	?___awtoft+2,w
  1807  0085  00A5               	movwf	___ftmul@f2+2
  1808  0086  3000               	movlw	0
  1809  0087  00A0               	movwf	___ftmul@f1
  1810  0088  30FA               	movlw	250
  1811  0089  00A1               	movwf	___ftmul@f1+1
  1812  008A  3044               	movlw	68
  1813  008B  00A2               	movwf	___ftmul@f1+2
  1814  008C  120A  118A  2454  120A  118A  	fcall	___ftmul
  1815  0091  1283               	bcf	3,5	;RP0=0, select bank0
  1816  0092  1303               	bcf	3,6	;RP1=0, select bank0
  1817  0093  0820               	movf	?___ftmul,w
  1818  0094  00B0               	movwf	___fttol@f1
  1819  0095  0821               	movf	?___ftmul+1,w
  1820  0096  00B1               	movwf	___fttol@f1+1
  1821  0097  0822               	movf	?___ftmul+2,w
  1822  0098  00B2               	movwf	___fttol@f1+2
  1823  0099  120A  118A  25B6  120A  118A  	fcall	___fttol
  1824  009E  1283               	bcf	3,5	;RP0=0, select bank0
  1825  009F  1303               	bcf	3,6	;RP1=0, select bank0
  1826  00A0  0830               	movf	?___fttol,w
  1827  00A1  00BE               	movwf	??_ISR
  1828  00A2  0831               	movf	?___fttol+1,w
  1829  00A3  00BF               	movwf	??_ISR+1
  1830  00A4  0832               	movf	?___fttol+2,w
  1831  00A5  00C0               	movwf	??_ISR+2
  1832  00A6  0833               	movf	?___fttol+3,w
  1833  00A7  00C1               	movwf	??_ISR+3
  1834                           
  1835                           ;RoadCrossingTrafficLightSystem.c: 94: _delay((unsigned long)((dl*1000)*(8000000/4000.0)
      +                          ));
  1836  00A8  30E8               	movlw	232
  1837  00A9  00F2               	movwf	___wmul@multiplicand
  1838  00AA  3003               	movlw	3
  1839  00AB  00F3               	movwf	___wmul@multiplicand+1
  1840  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  1841  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  1842  00AE  084F               	movf	ISR@dl+1,w
  1843  00AF  00F1               	movwf	___wmul@multiplier+1
  1844  00B0  084E               	movf	ISR@dl,w
  1845  00B1  00F0               	movwf	___wmul@multiplier
  1846  00B2  120A  118A  27B5  120A  118A  	fcall	___wmul
  1847  00B7  0871               	movf	?___wmul+1,w
  1848  00B8  00F9               	movwf	___awtoft@c+1
  1849  00B9  0870               	movf	?___wmul,w
  1850  00BA  00F8               	movwf	___awtoft@c
  1851  00BB  120A  118A  27D6  120A  118A  	fcall	___awtoft
  1852  00C0  0878               	movf	?___awtoft,w
  1853  00C1  1283               	bcf	3,5	;RP0=0, select bank0
  1854  00C2  1303               	bcf	3,6	;RP1=0, select bank0
  1855  00C3  00A3               	movwf	___ftmul@f2
  1856  00C4  0879               	movf	?___awtoft+1,w
  1857  00C5  00A4               	movwf	___ftmul@f2+1
  1858  00C6  087A               	movf	?___awtoft+2,w
  1859  00C7  00A5               	movwf	___ftmul@f2+2
  1860  00C8  3000               	movlw	0
  1861  00C9  00A0               	movwf	___ftmul@f1
  1862  00CA  30FA               	movlw	250
  1863  00CB  00A1               	movwf	___ftmul@f1+1
  1864  00CC  3044               	movlw	68
  1865  00CD  00A2               	movwf	___ftmul@f1+2
  1866  00CE  120A  118A  2454  120A  118A  	fcall	___ftmul
  1867  00D3  1283               	bcf	3,5	;RP0=0, select bank0
  1868  00D4  1303               	bcf	3,6	;RP1=0, select bank0
  1869  00D5  0820               	movf	?___ftmul,w
  1870  00D6  00B0               	movwf	___fttol@f1
  1871  00D7  0821               	movf	?___ftmul+1,w
  1872  00D8  00B1               	movwf	___fttol@f1+1
  1873  00D9  0822               	movf	?___ftmul+2,w
  1874  00DA  00B2               	movwf	___fttol@f1+2
  1875  00DB  120A  118A  25B6  120A  118A  	fcall	___fttol
  1876  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  1877  00E1  1303               	bcf	3,6	;RP1=0, select bank0
  1878  00E2  0830               	movf	?___fttol,w
  1879  00E3  00BE               	movwf	??_ISR
  1880  00E4  0831               	movf	?___fttol+1,w
  1881  00E5  00BF               	movwf	??_ISR+1
  1882  00E6  0832               	movf	?___fttol+2,w
  1883  00E7  00C0               	movwf	??_ISR+2
  1884  00E8  0833               	movf	?___fttol+3,w
  1885  00E9  00C1               	movwf	??_ISR+3
  1886  00EA                     i1l1544:	
  1887                           
  1888                           ;RoadCrossingTrafficLightSystem.c: 95: }
  1889                           ;RoadCrossingTrafficLightSystem.c: 96: RB2 = 1;
  1890  00EA  1283               	bcf	3,5	;RP0=0, select bank0
  1891  00EB  1303               	bcf	3,6	;RP1=0, select bank0
  1892  00EC  1506               	bsf	6,2	;volatile
  1893                           
  1894                           ;RoadCrossingTrafficLightSystem.c: 97: for(int i = 5;i>-1;i--){
  1895  00ED  3005               	movlw	5
  1896  00EE  00D4               	movwf	ISR@i
  1897  00EF  3000               	movlw	0
  1898  00F0  00D5               	movwf	ISR@i+1
  1899  00F1  1BD5               	btfsc	ISR@i+1,7
  1900  00F2  2926               	goto	i1l1570
  1901  00F3                     i1l1552:	
  1902                           
  1903                           ;RoadCrossingTrafficLightSystem.c: 100: PORTD = decTo7Seg(i);
  1904  00F3  0855               	movf	ISR@i+1,w
  1905  00F4  00F1               	movwf	decTo7Seg@a+1
  1906  00F5  0854               	movf	ISR@i,w
  1907  00F6  00F0               	movwf	decTo7Seg@a
  1908  00F7  120A  118A  2756  120A  118A  	fcall	_decTo7Seg
  1909  00FC  1283               	bcf	3,5	;RP0=0, select bank0
  1910  00FD  1303               	bcf	3,6	;RP1=0, select bank0
  1911  00FE  0088               	movwf	8	;volatile
  1912                           
  1913                           ;RoadCrossingTrafficLightSystem.c: 101: PORTC = 0x3F;
  1914  00FF  303F               	movlw	63
  1915  0100  0087               	movwf	7	;volatile
  1916                           
  1917                           ;RoadCrossingTrafficLightSystem.c: 102: _delay((unsigned long)((1000)*(8000000/4000.0)))
      +                          ;
  1918  0101  300B               	movlw	11
  1919  0102  1283               	bcf	3,5	;RP0=0, select bank0
  1920  0103  1303               	bcf	3,6	;RP1=0, select bank0
  1921  0104  00C0               	movwf	??_ISR+2
  1922  0105  3026               	movlw	38
  1923  0106  00BF               	movwf	??_ISR+1
  1924  0107  305D               	movlw	93
  1925  0108  00BE               	movwf	??_ISR
  1926  0109                     u214_27:	
  1927  0109  0BBE               	decfsz	??_ISR,f
  1928  010A  2909               	goto	u214_27
  1929  010B  0BBF               	decfsz	??_ISR+1,f
  1930  010C  2909               	goto	u214_27
  1931  010D  0BC0               	decfsz	??_ISR+2,f
  1932  010E  2909               	goto	u214_27
  1933                           
  1934                           ;RoadCrossingTrafficLightSystem.c: 104: if(i==3){
  1935  010F  3003               	movlw	3
  1936  0110  1283               	bcf	3,5	;RP0=0, select bank0
  1937  0111  1303               	bcf	3,6	;RP1=0, select bank0
  1938  0112  0654               	xorwf	ISR@i,w
  1939  0113  0455               	iorwf	ISR@i+1,w
  1940  0114  1D03               	btfss	3,2
  1941  0115  2918               	goto	i1l1562
  1942                           
  1943                           ;RoadCrossingTrafficLightSystem.c: 105: RB7 = 0;
  1944  0116  1386               	bcf	6,7	;volatile
  1945                           
  1946                           ;RoadCrossingTrafficLightSystem.c: 106: RB6 = 1;
  1947  0117  1706               	bsf	6,6	;volatile
  1948  0118                     i1l1562:	
  1949                           
  1950                           ;RoadCrossingTrafficLightSystem.c: 107: }
  1951                           ;RoadCrossingTrafficLightSystem.c: 108: if(i==1){
  1952  0118  0354               	decf	ISR@i,w
  1953  0119  0455               	iorwf	ISR@i+1,w
  1954  011A  1D03               	btfss	3,2
  1955  011B  291E               	goto	i1l1566
  1956                           
  1957                           ;RoadCrossingTrafficLightSystem.c: 109: RB6 = 0;
  1958  011C  1306               	bcf	6,6	;volatile
  1959                           
  1960                           ;RoadCrossingTrafficLightSystem.c: 110: RB5 = 1;
  1961  011D  1686               	bsf	6,5	;volatile
  1962  011E                     i1l1566:	
  1963  011E  30FF               	movlw	255
  1964  011F  07D4               	addwf	ISR@i,f
  1965  0120  1803               	skipnc
  1966  0121  0AD5               	incf	ISR@i+1,f
  1967  0122  30FF               	movlw	255
  1968  0123  07D5               	addwf	ISR@i+1,f
  1969  0124  1FD5               	btfss	ISR@i+1,7
  1970  0125  28F3               	goto	i1l1552
  1971  0126                     i1l1570:	
  1972                           
  1973                           ;RoadCrossingTrafficLightSystem.c: 111: }
  1974                           ;RoadCrossingTrafficLightSystem.c: 112: }
  1975                           ;RoadCrossingTrafficLightSystem.c: 113: PORTC = 0x00;
  1976  0126  0187               	clrf	7	;volatile
  1977                           
  1978                           ;RoadCrossingTrafficLightSystem.c: 114: PORTD = 0x00;
  1979  0127  0188               	clrf	8	;volatile
  1980                           
  1981                           ;RoadCrossingTrafficLightSystem.c: 116: _delay((unsigned long)((1000)*(8000000/4000.0)))
      +                          ;
  1982  0128  300B               	movlw	11
  1983  0129  1283               	bcf	3,5	;RP0=0, select bank0
  1984  012A  1303               	bcf	3,6	;RP1=0, select bank0
  1985  012B  00C0               	movwf	??_ISR+2
  1986  012C  3026               	movlw	38
  1987  012D  00BF               	movwf	??_ISR+1
  1988  012E  305D               	movlw	93
  1989  012F  00BE               	movwf	??_ISR
  1990  0130                     u215_27:	
  1991  0130  0BBE               	decfsz	??_ISR,f
  1992  0131  2930               	goto	u215_27
  1993  0132  0BBF               	decfsz	??_ISR+1,f
  1994  0133  2930               	goto	u215_27
  1995  0134  0BC0               	decfsz	??_ISR+2,f
  1996  0135  2930               	goto	u215_27
  1997                           
  1998                           ;RoadCrossingTrafficLightSystem.c: 117: RB2 =0;
  1999  0136  1283               	bcf	3,5	;RP0=0, select bank0
  2000  0137  1303               	bcf	3,6	;RP1=0, select bank0
  2001  0138  1106               	bcf	6,2	;volatile
  2002                           
  2003                           ;RoadCrossingTrafficLightSystem.c: 118: int x = at;
  2004  0139  0859               	movf	_at+1,w
  2005  013A  00D1               	movwf	ISR@x+1
  2006  013B  0858               	movf	_at,w
  2007  013C  00D0               	movwf	ISR@x
  2008  013D                     i1l1578:	
  2009                           ;RoadCrossingTrafficLightSystem.c: 120: do{
  2010                           
  2011                           
  2012                           ;RoadCrossingTrafficLightSystem.c: 121: int x2 = x/100;
  2013  013D  3064               	movlw	100
  2014  013E  00F7               	movwf	___awdiv@divisor
  2015  013F  3000               	movlw	0
  2016  0140  00F8               	movwf	___awdiv@divisor+1
  2017  0141  0851               	movf	ISR@x+1,w
  2018  0142  00FA               	movwf	___awdiv@dividend+1
  2019  0143  0850               	movf	ISR@x,w
  2020  0144  00F9               	movwf	___awdiv@dividend
  2021  0145  120A  118A  26B0  120A  118A  	fcall	___awdiv
  2022  014A  0878               	movf	?___awdiv+1,w
  2023  014B  1283               	bcf	3,5	;RP0=0, select bank0
  2024  014C  1303               	bcf	3,6	;RP1=0, select bank0
  2025  014D  00C7               	movwf	ISR@x2+1
  2026  014E  0877               	movf	?___awdiv,w
  2027  014F  00C6               	movwf	ISR@x2
  2028                           
  2029                           ;RoadCrossingTrafficLightSystem.c: 122: int x1 = (x%100)/10;
  2030  0150  300A               	movlw	10
  2031  0151  00F7               	movwf	___awdiv@divisor
  2032  0152  3000               	movlw	0
  2033  0153  00F8               	movwf	___awdiv@divisor+1
  2034  0154  0851               	movf	ISR@x+1,w
  2035  0155  00F3               	movwf	___awmod@dividend+1
  2036  0156  0850               	movf	ISR@x,w
  2037  0157  00F2               	movwf	___awmod@dividend
  2038  0158  3064               	movlw	100
  2039  0159  00F0               	movwf	___awmod@divisor
  2040  015A  3000               	movlw	0
  2041  015B  00F1               	movwf	___awmod@divisor+1
  2042  015C  120A  118A  270B  120A  118A  	fcall	___awmod
  2043  0161  0871               	movf	?___awmod+1,w
  2044  0162  00FA               	movwf	___awdiv@dividend+1
  2045  0163  0870               	movf	?___awmod,w
  2046  0164  00F9               	movwf	___awdiv@dividend
  2047  0165  120A  118A  26B0  120A  118A  	fcall	___awdiv
  2048  016A  0878               	movf	?___awdiv+1,w
  2049  016B  1283               	bcf	3,5	;RP0=0, select bank0
  2050  016C  1303               	bcf	3,6	;RP1=0, select bank0
  2051  016D  00C9               	movwf	ISR@x1+1
  2052  016E  0877               	movf	?___awdiv,w
  2053  016F  00C8               	movwf	ISR@x1
  2054                           
  2055                           ;RoadCrossingTrafficLightSystem.c: 123: int x0 = (x%100)%10;
  2056  0170  0851               	movf	ISR@x+1,w
  2057  0171  00F3               	movwf	___awmod@dividend+1
  2058  0172  0850               	movf	ISR@x,w
  2059  0173  00F2               	movwf	___awmod@dividend
  2060  0174  3064               	movlw	100
  2061  0175  00F0               	movwf	___awmod@divisor
  2062  0176  3000               	movlw	0
  2063  0177  00F1               	movwf	___awmod@divisor+1
  2064  0178  120A  118A  270B  120A  118A  	fcall	___awmod
  2065  017D  0871               	movf	?___awmod+1,w
  2066  017E  1283               	bcf	3,5	;RP0=0, select bank0
  2067  017F  1303               	bcf	3,6	;RP1=0, select bank0
  2068  0180  00CD               	movwf	_ISR$488+1
  2069  0181  0870               	movf	?___awmod,w
  2070  0182  00CC               	movwf	_ISR$488
  2071                           
  2072                           ;RoadCrossingTrafficLightSystem.c: 123: int x0 = (x%100)%10;
  2073  0183  300A               	movlw	10
  2074  0184  00F0               	movwf	___awmod@divisor
  2075  0185  3000               	movlw	0
  2076  0186  00F1               	movwf	___awmod@divisor+1
  2077  0187  084D               	movf	_ISR$488+1,w
  2078  0188  00F3               	movwf	___awmod@dividend+1
  2079  0189  084C               	movf	_ISR$488,w
  2080  018A  00F2               	movwf	___awmod@dividend
  2081  018B  120A  118A  270B  120A  118A  	fcall	___awmod
  2082  0190  0871               	movf	?___awmod+1,w
  2083  0191  1283               	bcf	3,5	;RP0=0, select bank0
  2084  0192  1303               	bcf	3,6	;RP1=0, select bank0
  2085  0193  00CB               	movwf	ISR@x0+1
  2086  0194  0870               	movf	?___awmod,w
  2087  0195  00CA               	movwf	ISR@x0
  2088                           
  2089                           ;RoadCrossingTrafficLightSystem.c: 125: if(x2>0){
  2090  0196  0847               	movf	ISR@x2+1,w
  2091  0197  3A80               	xorlw	128
  2092  0198  00FF               	movwf	127
  2093  0199  3080               	movlw	128
  2094  019A  027F               	subwf	127,w
  2095  019B  1D03               	skipz
  2096  019C  299F               	goto	u189_25
  2097  019D  3001               	movlw	1
  2098  019E  0246               	subwf	ISR@x2,w
  2099  019F                     u189_25:	
  2100  019F  1C03               	skipc
  2101  01A0  29A7               	goto	i1l1590
  2102                           
  2103                           ;RoadCrossingTrafficLightSystem.c: 126: PORTC = 0x6F;
  2104  01A1  306F               	movlw	111
  2105  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  2106  01A3  1303               	bcf	3,6	;RP1=0, select bank0
  2107  01A4  0087               	movwf	7	;volatile
  2108                           
  2109                           ;RoadCrossingTrafficLightSystem.c: 127: PORTD = 0x6F;
  2110  01A5  306F               	movlw	111
  2111  01A6  29C0               	goto	L1
  2112  01A7                     i1l1590:	
  2113                           ;RoadCrossingTrafficLightSystem.c: 128: }else{
  2114                           
  2115                           
  2116                           ;RoadCrossingTrafficLightSystem.c: 129: PORTC = decTo7Seg(x1);
  2117  01A7  1283               	bcf	3,5	;RP0=0, select bank0
  2118  01A8  1303               	bcf	3,6	;RP1=0, select bank0
  2119  01A9  0849               	movf	ISR@x1+1,w
  2120  01AA  00F1               	movwf	decTo7Seg@a+1
  2121  01AB  0848               	movf	ISR@x1,w
  2122  01AC  00F0               	movwf	decTo7Seg@a
  2123  01AD  120A  118A  2756  120A  118A  	fcall	_decTo7Seg
  2124  01B2  1283               	bcf	3,5	;RP0=0, select bank0
  2125  01B3  1303               	bcf	3,6	;RP1=0, select bank0
  2126  01B4  0087               	movwf	7	;volatile
  2127                           
  2128                           ;RoadCrossingTrafficLightSystem.c: 130: PORTD = decTo7Seg(x0);
  2129  01B5  084B               	movf	ISR@x0+1,w
  2130  01B6  00F1               	movwf	decTo7Seg@a+1
  2131  01B7  084A               	movf	ISR@x0,w
  2132  01B8  00F0               	movwf	decTo7Seg@a
  2133  01B9  120A  118A  2756  120A  118A  	fcall	_decTo7Seg
  2134  01BE  1283               	bcf	3,5	;RP0=0, select bank0
  2135  01BF  1303               	bcf	3,6	;RP1=0, select bank0
  2136  01C0                     L1:	
  2137  01C0  0088               	movwf	8	;volatile
  2138                           
  2139                           ;RoadCrossingTrafficLightSystem.c: 131: }
  2140                           ;RoadCrossingTrafficLightSystem.c: 133: _delay((unsigned long)((1000)*(8000000/4000.0)))
      +                          ;
  2141  01C1  300B               	movlw	11
  2142  01C2  1283               	bcf	3,5	;RP0=0, select bank0
  2143  01C3  1303               	bcf	3,6	;RP1=0, select bank0
  2144  01C4  00C0               	movwf	??_ISR+2
  2145  01C5  3026               	movlw	38
  2146  01C6  00BF               	movwf	??_ISR+1
  2147  01C7  305D               	movlw	93
  2148  01C8  00BE               	movwf	??_ISR
  2149  01C9                     u216_27:	
  2150  01C9  0BBE               	decfsz	??_ISR,f
  2151  01CA  29C9               	goto	u216_27
  2152  01CB  0BBF               	decfsz	??_ISR+1,f
  2153  01CC  29C9               	goto	u216_27
  2154  01CD  0BC0               	decfsz	??_ISR+2,f
  2155  01CE  29C9               	goto	u216_27
  2156                           
  2157                           ;RoadCrossingTrafficLightSystem.c: 135: x--;
  2158  01CF  30FF               	movlw	255
  2159  01D0  1283               	bcf	3,5	;RP0=0, select bank0
  2160  01D1  1303               	bcf	3,6	;RP1=0, select bank0
  2161  01D2  07D0               	addwf	ISR@x,f
  2162  01D3  1803               	skipnc
  2163  01D4  0AD1               	incf	ISR@x+1,f
  2164  01D5  30FF               	movlw	255
  2165  01D6  07D1               	addwf	ISR@x+1,f
  2166                           
  2167                           ;RoadCrossingTrafficLightSystem.c: 137: }while(x>=0);
  2168  01D7  1FD1               	btfss	ISR@x+1,7
  2169  01D8  293D               	goto	i1l1578
  2170                           
  2171                           ;RoadCrossingTrafficLightSystem.c: 138: RB2 = 1;
  2172  01D9  1506               	bsf	6,2	;volatile
  2173                           
  2174                           ;RoadCrossingTrafficLightSystem.c: 139: PORTC = 0x00;
  2175  01DA  0187               	clrf	7	;volatile
  2176                           
  2177                           ;RoadCrossingTrafficLightSystem.c: 140: PORTD = 0x00;
  2178  01DB  0188               	clrf	8	;volatile
  2179                           
  2180                           ;RoadCrossingTrafficLightSystem.c: 142: for(int j = 0;j<5;j++){
  2181  01DC  01D2               	clrf	ISR@j
  2182  01DD  01D3               	clrf	ISR@j+1
  2183  01DE  0853               	movf	ISR@j+1,w
  2184  01DF  3A80               	xorlw	128
  2185  01E0  00FF               	movwf	127
  2186  01E1  3080               	movlw	128
  2187  01E2  027F               	subwf	127,w
  2188  01E3  1D03               	skipz
  2189  01E4  29E7               	goto	u191_25
  2190  01E5  3005               	movlw	5
  2191  01E6  0252               	subwf	ISR@j,w
  2192  01E7                     u191_25:	
  2193  01E7  1803               	btfsc	3,0
  2194  01E8  2A17               	goto	i1l1618
  2195  01E9                     i1l1604:	
  2196                           
  2197                           ;RoadCrossingTrafficLightSystem.c: 143: _delay((unsigned long)((1000)*(8000000/4000.0)))
      +                          ;
  2198  01E9  300B               	movlw	11
  2199  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  2200  01EB  1303               	bcf	3,6	;RP1=0, select bank0
  2201  01EC  00C0               	movwf	??_ISR+2
  2202  01ED  3026               	movlw	38
  2203  01EE  00BF               	movwf	??_ISR+1
  2204  01EF  305D               	movlw	93
  2205  01F0  00BE               	movwf	??_ISR
  2206  01F1                     u217_27:	
  2207  01F1  0BBE               	decfsz	??_ISR,f
  2208  01F2  29F1               	goto	u217_27
  2209  01F3  0BBF               	decfsz	??_ISR+1,f
  2210  01F4  29F1               	goto	u217_27
  2211  01F5  0BC0               	decfsz	??_ISR+2,f
  2212  01F6  29F1               	goto	u217_27
  2213                           
  2214                           ;RoadCrossingTrafficLightSystem.c: 144: if(j==2){
  2215  01F7  3002               	movlw	2
  2216  01F8  1283               	bcf	3,5	;RP0=0, select bank0
  2217  01F9  1303               	bcf	3,6	;RP1=0, select bank0
  2218  01FA  0652               	xorwf	ISR@j,w
  2219  01FB  0453               	iorwf	ISR@j+1,w
  2220  01FC  1903               	btfsc	3,2
  2221                           
  2222                           ;RoadCrossingTrafficLightSystem.c: 145: RB6 = 1;
  2223  01FD  1706               	bsf	6,6	;volatile
  2224                           
  2225                           ;RoadCrossingTrafficLightSystem.c: 146: }
  2226                           ;RoadCrossingTrafficLightSystem.c: 147: if(j==4){
  2227  01FE  3004               	movlw	4
  2228  01FF  0652               	xorwf	ISR@j,w
  2229  0200  0453               	iorwf	ISR@j+1,w
  2230  0201  1D03               	btfss	3,2
  2231  0202  2A06               	goto	i1l1614
  2232                           
  2233                           ;RoadCrossingTrafficLightSystem.c: 148: RB5 = 0;
  2234  0203  1286               	bcf	6,5	;volatile
  2235                           
  2236                           ;RoadCrossingTrafficLightSystem.c: 149: RB6 = 0;
  2237  0204  1306               	bcf	6,6	;volatile
  2238                           
  2239                           ;RoadCrossingTrafficLightSystem.c: 150: RB7 = 1;
  2240  0205  1786               	bsf	6,7	;volatile
  2241  0206                     i1l1614:	
  2242  0206  3001               	movlw	1
  2243  0207  07D2               	addwf	ISR@j,f
  2244  0208  1803               	skipnc
  2245  0209  0AD3               	incf	ISR@j+1,f
  2246  020A  3000               	movlw	0
  2247  020B  07D3               	addwf	ISR@j+1,f
  2248  020C  0853               	movf	ISR@j+1,w
  2249  020D  3A80               	xorlw	128
  2250  020E  00FF               	movwf	127
  2251  020F  3080               	movlw	128
  2252  0210  027F               	subwf	127,w
  2253  0211  1D03               	skipz
  2254  0212  2A15               	goto	u194_25
  2255  0213  3005               	movlw	5
  2256  0214  0252               	subwf	ISR@j,w
  2257  0215                     u194_25:	
  2258  0215  1C03               	skipc
  2259  0216  29E9               	goto	i1l1604
  2260  0217                     i1l1618:	
  2261                           
  2262                           ;RoadCrossingTrafficLightSystem.c: 151: }
  2263                           ;RoadCrossingTrafficLightSystem.c: 152: }
  2264                           ;RoadCrossingTrafficLightSystem.c: 154: en = 0;
  2265  0217  1283               	bcf	3,5	;RP0=0, select bank0
  2266  0218  1303               	bcf	3,6	;RP1=0, select bank0
  2267  0219  01DC               	clrf	_en
  2268                           
  2269                           ;RoadCrossingTrafficLightSystem.c: 157: INTF=0;
  2270  021A  108B               	bcf	11,1	;volatile
  2271  021B                     i1l122:	
  2272  021B  0845               	movf	??_ISR+7,w
  2273  021C  00FF               	movwf	127
  2274  021D  0844               	movf	??_ISR+6,w
  2275  021E  008A               	movwf	10
  2276  021F  0843               	movf	??_ISR+5,w
  2277  0220  0084               	movwf	4
  2278  0221  0E42               	swapf	(??_ISR+4)^0,w
  2279  0222  0083               	movwf	3
  2280  0223  0EFE               	swapf	126,f
  2281  0224  0E7E               	swapf	126,w
  2282  0225  0009               	retfie
  2283  0226                     __end_of_ISR:	
  2284                           
  2285                           	psect	intentry
  2286  0004                     __pintentry:	
  2287                           ;incstack = 0
  2288                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2289                           
  2290  0004                     interrupt_function:	
  2291  007E                     saved_w	set	btemp
  2292  0004  00FE               	movwf	btemp
  2293  0005  0E03               	swapf	3,w
  2294  0006  1283               	bcf	3,5	;RP0=0, select bank0
  2295  0007  1303               	bcf	3,6	;RP1=0, select bank0
  2296  0008  00C2               	movwf	??_ISR+4
  2297  0009  0804               	movf	4,w
  2298  000A  00C3               	movwf	??_ISR+5
  2299  000B  080A               	movf	10,w
  2300  000C  00C4               	movwf	??_ISR+6
  2301  000D  087F               	movf	btemp+1,w
  2302  000E  00C5               	movwf	??_ISR+7
  2303  000F  120A  118A  283C   	ljmp	_ISR
  2304                           
  2305                           	psect	text7
  2306  0756                     __ptext7:	
  2307 ;; *************** function _decTo7Seg *****************
  2308 ;; Defined at:
  2309 ;;		line 70 in file "RoadCrossingTrafficLightSystem.c"
  2310 ;; Parameters:    Size  Location     Type
  2311 ;;  a               2    0[COMMON] int 
  2312 ;; Auto vars:     Size  Location     Type
  2313 ;;		None
  2314 ;; Return value:  Size  Location     Type
  2315 ;;                  1    wreg      unsigned char 
  2316 ;; Registers used:
  2317 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2318 ;; Tracked objects:
  2319 ;;		On entry : 0/0
  2320 ;;		On exit  : 0/0
  2321 ;;		Unchanged: 0/0
  2322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2323 ;;      Params:         2       0       0       0       0
  2324 ;;      Locals:         0       0       0       0       0
  2325 ;;      Temps:          0       0       0       0       0
  2326 ;;      Totals:         2       0       0       0       0
  2327 ;;Total ram usage:        2 bytes
  2328 ;; Hardware stack levels used:    1
  2329 ;; This function calls:
  2330 ;;		Nothing
  2331 ;; This function is called by:
  2332 ;;		_ISR
  2333 ;; This function uses a non-reentrant model
  2334 ;;
  2335                           
  2336                           
  2337                           ;psect for function _decTo7Seg
  2338  0756                     _decTo7Seg:	
  2339                           
  2340                           ;RoadCrossingTrafficLightSystem.c: 71: switch(a){
  2341                           
  2342                           ;incstack = 0
  2343                           ; Regs used in _decTo7Seg: [wreg-fsr0h+status,2+status,0]
  2344  0756  2F6B               	goto	i1l1328
  2345  0757                     i1l1286:	
  2346                           ;RoadCrossingTrafficLightSystem.c: 72: case 0: return 0x3F;
  2347                           
  2348  0757  303F               	movlw	63
  2349  0758  0008               	return
  2350  0759                     i1l1290:	
  2351                           ;RoadCrossingTrafficLightSystem.c: 73: case 1: return 0x06;
  2352                           
  2353  0759  3006               	movlw	6
  2354  075A  0008               	return
  2355  075B                     i1l1294:	
  2356                           ;RoadCrossingTrafficLightSystem.c: 74: case 2: return 0x5B;
  2357                           
  2358  075B  305B               	movlw	91
  2359  075C  0008               	return
  2360  075D                     i1l1298:	
  2361                           ;RoadCrossingTrafficLightSystem.c: 75: case 3: return 0x4F;
  2362                           
  2363  075D  304F               	movlw	79
  2364  075E  0008               	return
  2365  075F                     i1l1302:	
  2366                           ;RoadCrossingTrafficLightSystem.c: 76: case 4: return 0x66;
  2367                           
  2368  075F  3066               	movlw	102
  2369  0760  0008               	return
  2370  0761                     i1l1306:	
  2371                           ;RoadCrossingTrafficLightSystem.c: 77: case 5: return 0x6D;
  2372                           
  2373  0761  306D               	movlw	109
  2374  0762  0008               	return
  2375  0763                     i1l1310:	
  2376                           ;RoadCrossingTrafficLightSystem.c: 78: case 6: return 0x7D;
  2377                           
  2378  0763  307D               	movlw	125
  2379  0764  0008               	return
  2380  0765                     i1l1314:	
  2381                           ;RoadCrossingTrafficLightSystem.c: 79: case 7: return 0x07;
  2382                           
  2383  0765  3007               	movlw	7
  2384  0766  0008               	return
  2385  0767                     i1l1318:	
  2386                           ;RoadCrossingTrafficLightSystem.c: 80: case 8: return 0x7F;
  2387                           
  2388  0767  307F               	movlw	127
  2389  0768  0008               	return
  2390  0769                     i1l1322:	
  2391                           ;RoadCrossingTrafficLightSystem.c: 81: case 9: return 0x6F;
  2392                           
  2393  0769  306F               	movlw	111
  2394                           
  2395                           ;RoadCrossingTrafficLightSystem.c: 82: }
  2396  076A  0008               	return
  2397  076B                     i1l1328:	
  2398                           
  2399                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2400                           ; Switch size 1, requested type "space"
  2401                           ; Number of cases is 1, Range of values is 0 to 0
  2402                           ; switch strategies available:
  2403                           ; Name         Instructions Cycles
  2404                           ; simple_byte            4     3 (average)
  2405                           ; direct_byte           11     8 (fixed)
  2406                           ; jumptable            260     6 (fixed)
  2407                           ;	Chosen strategy is simple_byte
  2408  076B  0871               	movf	decTo7Seg@a+1,w
  2409  076C  3A00               	xorlw	0	; case 0
  2410  076D  1903               	skipnz
  2411  076E  2F70               	goto	i1l1738
  2412  076F  2F90               	goto	i1l91
  2413  0770                     i1l1738:	
  2414                           
  2415                           ; Switch size 1, requested type "space"
  2416                           ; Number of cases is 10, Range of values is 0 to 9
  2417                           ; switch strategies available:
  2418                           ; Name         Instructions Cycles
  2419                           ; simple_byte           31    16 (average)
  2420                           ; direct_byte           38     8 (fixed)
  2421                           ; jumptable            260     6 (fixed)
  2422                           ;	Chosen strategy is simple_byte
  2423  0770  0870               	movf	decTo7Seg@a,w
  2424  0771  3A00               	xorlw	0	; case 0
  2425  0772  1903               	skipnz
  2426  0773  2F57               	goto	i1l1286
  2427  0774  3A01               	xorlw	1	; case 1
  2428  0775  1903               	skipnz
  2429  0776  2F59               	goto	i1l1290
  2430  0777  3A03               	xorlw	3	; case 2
  2431  0778  1903               	skipnz
  2432  0779  2F5B               	goto	i1l1294
  2433  077A  3A01               	xorlw	1	; case 3
  2434  077B  1903               	skipnz
  2435  077C  2F5D               	goto	i1l1298
  2436  077D  3A07               	xorlw	7	; case 4
  2437  077E  1903               	skipnz
  2438  077F  2F5F               	goto	i1l1302
  2439  0780  3A01               	xorlw	1	; case 5
  2440  0781  1903               	skipnz
  2441  0782  2F61               	goto	i1l1306
  2442  0783  3A03               	xorlw	3	; case 6
  2443  0784  1903               	skipnz
  2444  0785  2F63               	goto	i1l1310
  2445  0786  3A01               	xorlw	1	; case 7
  2446  0787  1903               	skipnz
  2447  0788  2F65               	goto	i1l1314
  2448  0789  3A0F               	xorlw	15	; case 8
  2449  078A  1903               	skipnz
  2450  078B  2F67               	goto	i1l1318
  2451  078C  3A01               	xorlw	1	; case 9
  2452  078D  1903               	skipnz
  2453  078E  2F69               	goto	i1l1322
  2454  078F  2F90               	goto	i1l91
  2455  0790                     i1l91:	
  2456  0790  0008               	return
  2457  0791                     __end_of_decTo7Seg:	
  2458                           
  2459                           	psect	text8
  2460  07B5                     __ptext8:	
  2461 ;; *************** function ___wmul *****************
  2462 ;; Defined at:
  2463 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  2464 ;; Parameters:    Size  Location     Type
  2465 ;;  multiplier      2    0[COMMON] unsigned int 
  2466 ;;  multiplicand    2    2[COMMON] unsigned int 
  2467 ;; Auto vars:     Size  Location     Type
  2468 ;;  product         2    4[COMMON] unsigned int 
  2469 ;; Return value:  Size  Location     Type
  2470 ;;                  2    0[COMMON] unsigned int 
  2471 ;; Registers used:
  2472 ;;		wreg, status,2, status,0
  2473 ;; Tracked objects:
  2474 ;;		On entry : 0/0
  2475 ;;		On exit  : 0/0
  2476 ;;		Unchanged: 0/0
  2477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2478 ;;      Params:         4       0       0       0       0
  2479 ;;      Locals:         2       0       0       0       0
  2480 ;;      Temps:          0       0       0       0       0
  2481 ;;      Totals:         6       0       0       0       0
  2482 ;;Total ram usage:        6 bytes
  2483 ;; Hardware stack levels used:    1
  2484 ;; This function calls:
  2485 ;;		Nothing
  2486 ;; This function is called by:
  2487 ;;		_ISR
  2488 ;; This function uses a non-reentrant model
  2489 ;;
  2490                           
  2491                           
  2492                           ;psect for function ___wmul
  2493  07B5                     ___wmul:	
  2494                           
  2495                           ;incstack = 0
  2496                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2497  07B5  01F4               	clrf	___wmul@product
  2498  07B6  01F5               	clrf	___wmul@product+1
  2499  07B7                     i1l1336:	
  2500  07B7  1C70               	btfss	___wmul@multiplier,0
  2501  07B8  2FBF               	goto	i1l226
  2502  07B9  0872               	movf	___wmul@multiplicand,w
  2503  07BA  07F4               	addwf	___wmul@product,f
  2504  07BB  1803               	skipnc
  2505  07BC  0AF5               	incf	___wmul@product+1,f
  2506  07BD  0873               	movf	___wmul@multiplicand+1,w
  2507  07BE  07F5               	addwf	___wmul@product+1,f
  2508  07BF                     i1l226:	
  2509  07BF  3001               	movlw	1
  2510  07C0                     u135_25:	
  2511  07C0  1003               	clrc
  2512  07C1  0DF2               	rlf	___wmul@multiplicand,f
  2513  07C2  0DF3               	rlf	___wmul@multiplicand+1,f
  2514  07C3  3EFF               	addlw	-1
  2515  07C4  1D03               	skipz
  2516  07C5  2FC0               	goto	u135_25
  2517  07C6  3001               	movlw	1
  2518  07C7                     u136_25:	
  2519  07C7  1003               	clrc
  2520  07C8  0CF1               	rrf	___wmul@multiplier+1,f
  2521  07C9  0CF0               	rrf	___wmul@multiplier,f
  2522  07CA  3EFF               	addlw	-1
  2523  07CB  1D03               	skipz
  2524  07CC  2FC7               	goto	u136_25
  2525  07CD  0870               	movf	___wmul@multiplier,w
  2526  07CE  0471               	iorwf	___wmul@multiplier+1,w
  2527  07CF  1D03               	btfss	3,2
  2528  07D0  2FB7               	goto	i1l1336
  2529  07D1  0875               	movf	___wmul@product+1,w
  2530  07D2  00F1               	movwf	?___wmul+1
  2531  07D3  0874               	movf	___wmul@product,w
  2532  07D4  00F0               	movwf	?___wmul
  2533  07D5  0008               	return
  2534  07D6                     __end_of___wmul:	
  2535                           
  2536                           	psect	text9
  2537  05B6                     __ptext9:	
  2538 ;; *************** function ___fttol *****************
  2539 ;; Defined at:
  2540 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
  2541 ;; Parameters:    Size  Location     Type
  2542 ;;  f1              3   16[BANK0 ] float 
  2543 ;; Auto vars:     Size  Location     Type
  2544 ;;  lval            4   25[BANK0 ] unsigned long 
  2545 ;;  exp1            1   29[BANK0 ] unsigned char 
  2546 ;;  sign1           1   24[BANK0 ] unsigned char 
  2547 ;; Return value:  Size  Location     Type
  2548 ;;                  4   16[BANK0 ] long 
  2549 ;; Registers used:
  2550 ;;		wreg, status,2, status,0
  2551 ;; Tracked objects:
  2552 ;;		On entry : 0/0
  2553 ;;		On exit  : 0/0
  2554 ;;		Unchanged: 0/0
  2555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2556 ;;      Params:         0       4       0       0       0
  2557 ;;      Locals:         0       6       0       0       0
  2558 ;;      Temps:          0       4       0       0       0
  2559 ;;      Totals:         0      14       0       0       0
  2560 ;;Total ram usage:       14 bytes
  2561 ;; Hardware stack levels used:    1
  2562 ;; This function calls:
  2563 ;;		Nothing
  2564 ;; This function is called by:
  2565 ;;		_ISR
  2566 ;; This function uses a non-reentrant model
  2567 ;;
  2568                           
  2569                           
  2570                           ;psect for function ___fttol
  2571  05B6                     ___fttol:	
  2572                           
  2573                           ;incstack = 0
  2574                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  2575  05B6  1283               	bcf	3,5	;RP0=0, select bank0
  2576  05B7  1303               	bcf	3,6	;RP1=0, select bank0
  2577  05B8  0830               	movf	___fttol@f1,w
  2578  05B9  00B4               	movwf	??___fttol
  2579  05BA  0831               	movf	___fttol@f1+1,w
  2580  05BB  00B5               	movwf	??___fttol+1
  2581  05BC  0832               	movf	___fttol@f1+2,w
  2582  05BD  00B6               	movwf	??___fttol+2
  2583  05BE  1003               	clrc
  2584  05BF  0D35               	rlf	??___fttol+1,w
  2585  05C0  0D36               	rlf	??___fttol+2,w
  2586  05C1  00B7               	movwf	??___fttol+3
  2587  05C2  0837               	movf	??___fttol+3,w
  2588  05C3  00BD               	movwf	___fttol@exp1
  2589  05C4  083D               	movf	___fttol@exp1,w
  2590  05C5  1D03               	btfss	3,2
  2591  05C6  2DD0               	goto	i1l1498
  2592  05C7  3000               	movlw	0
  2593  05C8  00B3               	movwf	?___fttol+3
  2594  05C9  3000               	movlw	0
  2595  05CA  00B2               	movwf	?___fttol+2
  2596  05CB  3000               	movlw	0
  2597  05CC  00B1               	movwf	?___fttol+1
  2598  05CD  3000               	movlw	0
  2599  05CE  00B0               	movwf	?___fttol
  2600  05CF  0008               	return
  2601  05D0                     i1l1498:	
  2602  05D0  0830               	movf	___fttol@f1,w
  2603  05D1  00B4               	movwf	??___fttol
  2604  05D2  0831               	movf	___fttol@f1+1,w
  2605  05D3  00B5               	movwf	??___fttol+1
  2606  05D4  0832               	movf	___fttol@f1+2,w
  2607  05D5  00B6               	movwf	??___fttol+2
  2608  05D6  3017               	movlw	23
  2609  05D7                     u173_25:	
  2610  05D7  1003               	clrc
  2611  05D8  0CB6               	rrf	??___fttol+2,f
  2612  05D9  0CB5               	rrf	??___fttol+1,f
  2613  05DA  0CB4               	rrf	??___fttol,f
  2614  05DB  3EFF               	addlw	-1
  2615  05DC  1D03               	skipz
  2616  05DD  2DD7               	goto	u173_25
  2617  05DE  0834               	movf	??___fttol,w
  2618  05DF  00B7               	movwf	??___fttol+3
  2619  05E0  0837               	movf	??___fttol+3,w
  2620  05E1  00B8               	movwf	___fttol@sign1
  2621  05E2  17B1               	bsf	___fttol@f1+1,7
  2622  05E3  30FF               	movlw	255
  2623  05E4  05B0               	andwf	___fttol@f1,f
  2624  05E5  30FF               	movlw	255
  2625  05E6  05B1               	andwf	___fttol@f1+1,f
  2626  05E7  3000               	movlw	0
  2627  05E8  05B2               	andwf	___fttol@f1+2,f
  2628  05E9  0830               	movf	___fttol@f1,w
  2629  05EA  00B9               	movwf	___fttol@lval
  2630  05EB  0831               	movf	___fttol@f1+1,w
  2631  05EC  00BA               	movwf	___fttol@lval+1
  2632  05ED  0832               	movf	___fttol@f1+2,w
  2633  05EE  00BB               	movwf	___fttol@lval+2
  2634  05EF  01BC               	clrf	___fttol@lval+3
  2635  05F0  308E               	movlw	142
  2636  05F1  02BD               	subwf	___fttol@exp1,f
  2637  05F2  1FBD               	btfss	___fttol@exp1,7
  2638  05F3  2E12               	goto	i1l1518
  2639  05F4  083D               	movf	___fttol@exp1,w
  2640  05F5  3A80               	xorlw	128
  2641  05F6  3E8F               	addlw	143
  2642  05F7  1803               	skipnc
  2643  05F8  2E02               	goto	i1l1516
  2644  05F9  3000               	movlw	0
  2645  05FA  00B3               	movwf	?___fttol+3
  2646  05FB  3000               	movlw	0
  2647  05FC  00B2               	movwf	?___fttol+2
  2648  05FD  3000               	movlw	0
  2649  05FE  00B1               	movwf	?___fttol+1
  2650  05FF  3000               	movlw	0
  2651  0600  00B0               	movwf	?___fttol
  2652  0601  0008               	return
  2653  0602                     i1l1516:	
  2654  0602  3001               	movlw	1
  2655  0603                     u176_25:	
  2656  0603  1003               	clrc
  2657  0604  0CBC               	rrf	___fttol@lval+3,f
  2658  0605  0CBB               	rrf	___fttol@lval+2,f
  2659  0606  0CBA               	rrf	___fttol@lval+1,f
  2660  0607  0CB9               	rrf	___fttol@lval,f
  2661  0608  3EFF               	addlw	-1
  2662  0609  1D03               	skipz
  2663  060A  2E03               	goto	u176_25
  2664  060B  3001               	movlw	1
  2665  060C  00B4               	movwf	??___fttol
  2666  060D  0834               	movf	??___fttol,w
  2667  060E  07BD               	addwf	___fttol@exp1,f
  2668  060F  1903               	btfsc	3,2
  2669  0610  2E2D               	goto	i1l1526
  2670  0611  2E02               	goto	i1l1516
  2671  0612                     i1l1518:	
  2672  0612  3018               	movlw	24
  2673  0613  023D               	subwf	___fttol@exp1,w
  2674  0614  1C03               	skipc
  2675  0615  2E2A               	goto	i1l478
  2676  0616  3000               	movlw	0
  2677  0617  00B3               	movwf	?___fttol+3
  2678  0618  3000               	movlw	0
  2679  0619  00B2               	movwf	?___fttol+2
  2680  061A  3000               	movlw	0
  2681  061B  00B1               	movwf	?___fttol+1
  2682  061C  3000               	movlw	0
  2683  061D  00B0               	movwf	?___fttol
  2684  061E  0008               	return
  2685  061F                     i1l1524:	
  2686  061F  3001               	movlw	1
  2687  0620  00B4               	movwf	??___fttol
  2688  0621                     u179_25:	
  2689  0621  1003               	clrc
  2690  0622  0DB9               	rlf	___fttol@lval,f
  2691  0623  0DBA               	rlf	___fttol@lval+1,f
  2692  0624  0DBB               	rlf	___fttol@lval+2,f
  2693  0625  0DBC               	rlf	___fttol@lval+3,f
  2694  0626  0BB4               	decfsz	??___fttol,f
  2695  0627  2E21               	goto	u179_25
  2696  0628  3001               	movlw	1
  2697  0629  02BD               	subwf	___fttol@exp1,f
  2698  062A                     i1l478:	
  2699  062A  083D               	movf	___fttol@exp1,w
  2700  062B  1D03               	btfss	3,2
  2701  062C  2E1F               	goto	i1l1524
  2702  062D                     i1l1526:	
  2703  062D  0838               	movf	___fttol@sign1,w
  2704  062E  1903               	btfsc	3,2
  2705  062F  2E3B               	goto	i1l1530
  2706  0630  09B9               	comf	___fttol@lval,f
  2707  0631  09BA               	comf	___fttol@lval+1,f
  2708  0632  09BB               	comf	___fttol@lval+2,f
  2709  0633  09BC               	comf	___fttol@lval+3,f
  2710  0634  0AB9               	incf	___fttol@lval,f
  2711  0635  1903               	skipnz
  2712  0636  0ABA               	incf	___fttol@lval+1,f
  2713  0637  1903               	skipnz
  2714  0638  0ABB               	incf	___fttol@lval+2,f
  2715  0639  1903               	skipnz
  2716  063A  0ABC               	incf	___fttol@lval+3,f
  2717  063B                     i1l1530:	
  2718  063B  083C               	movf	___fttol@lval+3,w
  2719  063C  00B3               	movwf	?___fttol+3
  2720  063D  083B               	movf	___fttol@lval+2,w
  2721  063E  00B2               	movwf	?___fttol+2
  2722  063F  083A               	movf	___fttol@lval+1,w
  2723  0640  00B1               	movwf	?___fttol+1
  2724  0641  0839               	movf	___fttol@lval,w
  2725  0642  00B0               	movwf	?___fttol
  2726  0643  0008               	return
  2727  0644                     __end_of___fttol:	
  2728                           
  2729                           	psect	text10
  2730  0454                     __ptext10:	
  2731 ;; *************** function ___ftmul *****************
  2732 ;; Defined at:
  2733 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftmul.c"
  2734 ;; Parameters:    Size  Location     Type
  2735 ;;  f1              3    0[BANK0 ] float 
  2736 ;;  f2              3    3[BANK0 ] float 
  2737 ;; Auto vars:     Size  Location     Type
  2738 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
  2739 ;;  sign            1   15[BANK0 ] unsigned char 
  2740 ;;  cntr            1   14[BANK0 ] unsigned char 
  2741 ;;  exp             1   10[BANK0 ] unsigned char 
  2742 ;; Return value:  Size  Location     Type
  2743 ;;                  3    0[BANK0 ] float 
  2744 ;; Registers used:
  2745 ;;		wreg, status,2, status,0, pclath, cstack
  2746 ;; Tracked objects:
  2747 ;;		On entry : 0/0
  2748 ;;		On exit  : 0/0
  2749 ;;		Unchanged: 0/0
  2750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2751 ;;      Params:         0       6       0       0       0
  2752 ;;      Locals:         0       6       0       0       0
  2753 ;;      Temps:          0       4       0       0       0
  2754 ;;      Totals:         0      16       0       0       0
  2755 ;;Total ram usage:       16 bytes
  2756 ;; Hardware stack levels used:    1
  2757 ;; Hardware stack levels required when called:    1
  2758 ;; This function calls:
  2759 ;;		___ftpack
  2760 ;; This function is called by:
  2761 ;;		_ISR
  2762 ;; This function uses a non-reentrant model
  2763 ;;
  2764                           
  2765                           
  2766                           ;psect for function ___ftmul
  2767  0454                     ___ftmul:	
  2768                           
  2769                           ;incstack = 0
  2770                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  2771  0454  1283               	bcf	3,5	;RP0=0, select bank0
  2772  0455  1303               	bcf	3,6	;RP1=0, select bank0
  2773  0456  0820               	movf	___ftmul@f1,w
  2774  0457  00A6               	movwf	??___ftmul
  2775  0458  0821               	movf	___ftmul@f1+1,w
  2776  0459  00A7               	movwf	??___ftmul+1
  2777  045A  0822               	movf	___ftmul@f1+2,w
  2778  045B  00A8               	movwf	??___ftmul+2
  2779  045C  1003               	clrc
  2780  045D  0D27               	rlf	??___ftmul+1,w
  2781  045E  0D28               	rlf	??___ftmul+2,w
  2782  045F  00A9               	movwf	??___ftmul+3
  2783  0460  0829               	movf	??___ftmul+3,w
  2784  0461  00AA               	movwf	___ftmul@exp
  2785  0462  082A               	movf	___ftmul@exp,w
  2786  0463  1D03               	btfss	3,2
  2787  0464  2C6C               	goto	i1l1448
  2788  0465  3000               	movlw	0
  2789  0466  00A0               	movwf	?___ftmul
  2790  0467  3000               	movlw	0
  2791  0468  00A1               	movwf	?___ftmul+1
  2792  0469  3000               	movlw	0
  2793  046A  00A2               	movwf	?___ftmul+2
  2794  046B  0008               	return
  2795  046C                     i1l1448:	
  2796  046C  0823               	movf	___ftmul@f2,w
  2797  046D  00A6               	movwf	??___ftmul
  2798  046E  0824               	movf	___ftmul@f2+1,w
  2799  046F  00A7               	movwf	??___ftmul+1
  2800  0470  0825               	movf	___ftmul@f2+2,w
  2801  0471  00A8               	movwf	??___ftmul+2
  2802  0472  1003               	clrc
  2803  0473  0D27               	rlf	??___ftmul+1,w
  2804  0474  0D28               	rlf	??___ftmul+2,w
  2805  0475  00A9               	movwf	??___ftmul+3
  2806  0476  0829               	movf	??___ftmul+3,w
  2807  0477  00AF               	movwf	___ftmul@sign
  2808  0478  082F               	movf	___ftmul@sign,w
  2809  0479  1D03               	btfss	3,2
  2810  047A  2C82               	goto	i1l1454
  2811  047B  3000               	movlw	0
  2812  047C  00A0               	movwf	?___ftmul
  2813  047D  3000               	movlw	0
  2814  047E  00A1               	movwf	?___ftmul+1
  2815  047F  3000               	movlw	0
  2816  0480  00A2               	movwf	?___ftmul+2
  2817  0481  0008               	return
  2818  0482                     i1l1454:	
  2819  0482  082F               	movf	___ftmul@sign,w
  2820  0483  3E7B               	addlw	123
  2821  0484  00A6               	movwf	??___ftmul
  2822  0485  0826               	movf	??___ftmul,w
  2823  0486  07AA               	addwf	___ftmul@exp,f
  2824  0487  0820               	movf	___ftmul@f1,w
  2825  0488  00A6               	movwf	??___ftmul
  2826  0489  0821               	movf	___ftmul@f1+1,w
  2827  048A  00A7               	movwf	??___ftmul+1
  2828  048B  0822               	movf	___ftmul@f1+2,w
  2829  048C  00A8               	movwf	??___ftmul+2
  2830  048D  3010               	movlw	16
  2831  048E                     u160_25:	
  2832  048E  1003               	clrc
  2833  048F  0CA8               	rrf	??___ftmul+2,f
  2834  0490  0CA7               	rrf	??___ftmul+1,f
  2835  0491  0CA6               	rrf	??___ftmul,f
  2836  0492  3EFF               	addlw	-1
  2837  0493  1D03               	skipz
  2838  0494  2C8E               	goto	u160_25
  2839  0495  0826               	movf	??___ftmul,w
  2840  0496  00A9               	movwf	??___ftmul+3
  2841  0497  0829               	movf	??___ftmul+3,w
  2842  0498  00AF               	movwf	___ftmul@sign
  2843  0499  0823               	movf	___ftmul@f2,w
  2844  049A  00A6               	movwf	??___ftmul
  2845  049B  0824               	movf	___ftmul@f2+1,w
  2846  049C  00A7               	movwf	??___ftmul+1
  2847  049D  0825               	movf	___ftmul@f2+2,w
  2848  049E  00A8               	movwf	??___ftmul+2
  2849  049F  3010               	movlw	16
  2850  04A0                     u161_25:	
  2851  04A0  1003               	clrc
  2852  04A1  0CA8               	rrf	??___ftmul+2,f
  2853  04A2  0CA7               	rrf	??___ftmul+1,f
  2854  04A3  0CA6               	rrf	??___ftmul,f
  2855  04A4  3EFF               	addlw	-1
  2856  04A5  1D03               	skipz
  2857  04A6  2CA0               	goto	u161_25
  2858  04A7  0826               	movf	??___ftmul,w
  2859  04A8  00A9               	movwf	??___ftmul+3
  2860  04A9  0829               	movf	??___ftmul+3,w
  2861  04AA  06AF               	xorwf	___ftmul@sign,f
  2862  04AB  3080               	movlw	128
  2863  04AC  00A6               	movwf	??___ftmul
  2864  04AD  0826               	movf	??___ftmul,w
  2865  04AE  05AF               	andwf	___ftmul@sign,f
  2866  04AF  17A1               	bsf	___ftmul@f1+1,7
  2867  04B0  17A4               	bsf	___ftmul@f2+1,7
  2868  04B1  30FF               	movlw	255
  2869  04B2  05A3               	andwf	___ftmul@f2,f
  2870  04B3  30FF               	movlw	255
  2871  04B4  05A4               	andwf	___ftmul@f2+1,f
  2872  04B5  3000               	movlw	0
  2873  04B6  05A5               	andwf	___ftmul@f2+2,f
  2874  04B7  3000               	movlw	0
  2875  04B8  00AB               	movwf	___ftmul@f3_as_product
  2876  04B9  3000               	movlw	0
  2877  04BA  00AC               	movwf	___ftmul@f3_as_product+1
  2878  04BB  3000               	movlw	0
  2879  04BC  00AD               	movwf	___ftmul@f3_as_product+2
  2880  04BD  3007               	movlw	7
  2881  04BE  00A6               	movwf	??___ftmul
  2882  04BF  0826               	movf	??___ftmul,w
  2883  04C0  00AE               	movwf	___ftmul@cntr
  2884  04C1                     i1l1466:	
  2885  04C1  1C20               	btfss	___ftmul@f1,0
  2886  04C2  2CD1               	goto	i1l1470
  2887  04C3  0823               	movf	___ftmul@f2,w
  2888  04C4  07AB               	addwf	___ftmul@f3_as_product,f
  2889  04C5  0824               	movf	___ftmul@f2+1,w
  2890  04C6  1103               	clrz
  2891  04C7  1803               	skipnc
  2892  04C8  0A24               	incf	___ftmul@f2+1,w
  2893  04C9  1D03               	btfss	3,2
  2894  04CA  07AC               	addwf	___ftmul@f3_as_product+1,f
  2895  04CB  0825               	movf	___ftmul@f2+2,w
  2896  04CC  1103               	clrz
  2897  04CD  1803               	skipnc
  2898  04CE  0A25               	incf	___ftmul@f2+2,w
  2899  04CF  1D03               	btfss	3,2
  2900  04D0  07AD               	addwf	___ftmul@f3_as_product+2,f
  2901  04D1                     i1l1470:	
  2902  04D1  3001               	movlw	1
  2903  04D2                     u164_25:	
  2904  04D2  1003               	clrc
  2905  04D3  0CA2               	rrf	___ftmul@f1+2,f
  2906  04D4  0CA1               	rrf	___ftmul@f1+1,f
  2907  04D5  0CA0               	rrf	___ftmul@f1,f
  2908  04D6  3EFF               	addlw	-1
  2909  04D7  1D03               	skipz
  2910  04D8  2CD2               	goto	u164_25
  2911  04D9  3001               	movlw	1
  2912  04DA                     u165_25:	
  2913  04DA  1003               	clrc
  2914  04DB  0DA3               	rlf	___ftmul@f2,f
  2915  04DC  0DA4               	rlf	___ftmul@f2+1,f
  2916  04DD  0DA5               	rlf	___ftmul@f2+2,f
  2917  04DE  3EFF               	addlw	-1
  2918  04DF  1D03               	skipz
  2919  04E0  2CDA               	goto	u165_25
  2920  04E1  3001               	movlw	1
  2921  04E2  02AE               	subwf	___ftmul@cntr,f
  2922  04E3  1D03               	btfss	3,2
  2923  04E4  2CC1               	goto	i1l1466
  2924  04E5  3009               	movlw	9
  2925  04E6  00A6               	movwf	??___ftmul
  2926  04E7  0826               	movf	??___ftmul,w
  2927  04E8  00AE               	movwf	___ftmul@cntr
  2928  04E9                     i1l1478:	
  2929  04E9  1C20               	btfss	___ftmul@f1,0
  2930  04EA  2CF9               	goto	i1l1482
  2931  04EB  0823               	movf	___ftmul@f2,w
  2932  04EC  07AB               	addwf	___ftmul@f3_as_product,f
  2933  04ED  0824               	movf	___ftmul@f2+1,w
  2934  04EE  1103               	clrz
  2935  04EF  1803               	skipnc
  2936  04F0  0A24               	incf	___ftmul@f2+1,w
  2937  04F1  1D03               	btfss	3,2
  2938  04F2  07AC               	addwf	___ftmul@f3_as_product+1,f
  2939  04F3  0825               	movf	___ftmul@f2+2,w
  2940  04F4  1103               	clrz
  2941  04F5  1803               	skipnc
  2942  04F6  0A25               	incf	___ftmul@f2+2,w
  2943  04F7  1D03               	btfss	3,2
  2944  04F8  07AD               	addwf	___ftmul@f3_as_product+2,f
  2945  04F9                     i1l1482:	
  2946  04F9  3001               	movlw	1
  2947  04FA                     u169_25:	
  2948  04FA  1003               	clrc
  2949  04FB  0CA2               	rrf	___ftmul@f1+2,f
  2950  04FC  0CA1               	rrf	___ftmul@f1+1,f
  2951  04FD  0CA0               	rrf	___ftmul@f1,f
  2952  04FE  3EFF               	addlw	-1
  2953  04FF  1D03               	skipz
  2954  0500  2CFA               	goto	u169_25
  2955  0501  3001               	movlw	1
  2956  0502                     u170_25:	
  2957  0502  1003               	clrc
  2958  0503  0CAD               	rrf	___ftmul@f3_as_product+2,f
  2959  0504  0CAC               	rrf	___ftmul@f3_as_product+1,f
  2960  0505  0CAB               	rrf	___ftmul@f3_as_product,f
  2961  0506  3EFF               	addlw	-1
  2962  0507  1D03               	skipz
  2963  0508  2D02               	goto	u170_25
  2964  0509  3001               	movlw	1
  2965  050A  02AE               	subwf	___ftmul@cntr,f
  2966  050B  1D03               	btfss	3,2
  2967  050C  2CE9               	goto	i1l1478
  2968  050D  082B               	movf	___ftmul@f3_as_product,w
  2969  050E  00F0               	movwf	___ftpack@arg
  2970  050F  082C               	movf	___ftmul@f3_as_product+1,w
  2971  0510  00F1               	movwf	___ftpack@arg+1
  2972  0511  082D               	movf	___ftmul@f3_as_product+2,w
  2973  0512  00F2               	movwf	___ftpack@arg+2
  2974  0513  082A               	movf	___ftmul@exp,w
  2975  0514  00A6               	movwf	??___ftmul
  2976  0515  0826               	movf	??___ftmul,w
  2977  0516  00F3               	movwf	___ftpack@exp
  2978  0517  082F               	movf	___ftmul@sign,w
  2979  0518  00A7               	movwf	??___ftmul+1
  2980  0519  0827               	movf	??___ftmul+1,w
  2981  051A  00F4               	movwf	___ftpack@sign
  2982  051B  120A  118A  2644   	fcall	___ftpack
  2983  051E  0870               	movf	?___ftpack,w
  2984  051F  1283               	bcf	3,5	;RP0=0, select bank0
  2985  0520  1303               	bcf	3,6	;RP1=0, select bank0
  2986  0521  00A0               	movwf	?___ftmul
  2987  0522  0871               	movf	?___ftpack+1,w
  2988  0523  00A1               	movwf	?___ftmul+1
  2989  0524  0872               	movf	?___ftpack+2,w
  2990  0525  00A2               	movwf	?___ftmul+2
  2991  0526  0008               	return
  2992  0527                     __end_of___ftmul:	
  2993                           
  2994                           	psect	text11
  2995  07D6                     __ptext11:	
  2996 ;; *************** function ___awtoft *****************
  2997 ;; Defined at:
  2998 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awtoft.c"
  2999 ;; Parameters:    Size  Location     Type
  3000 ;;  c               2    8[COMMON] int 
  3001 ;; Auto vars:     Size  Location     Type
  3002 ;;  sign            1   13[COMMON] unsigned char 
  3003 ;; Return value:  Size  Location     Type
  3004 ;;                  3    8[COMMON] float 
  3005 ;; Registers used:
  3006 ;;		wreg, status,2, status,0, pclath, cstack
  3007 ;; Tracked objects:
  3008 ;;		On entry : 0/0
  3009 ;;		On exit  : 0/0
  3010 ;;		Unchanged: 0/0
  3011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3012 ;;      Params:         3       0       0       0       0
  3013 ;;      Locals:         1       0       0       0       0
  3014 ;;      Temps:          2       0       0       0       0
  3015 ;;      Totals:         6       0       0       0       0
  3016 ;;Total ram usage:        6 bytes
  3017 ;; Hardware stack levels used:    1
  3018 ;; Hardware stack levels required when called:    1
  3019 ;; This function calls:
  3020 ;;		___ftpack
  3021 ;; This function is called by:
  3022 ;;		_ISR
  3023 ;; This function uses a non-reentrant model
  3024 ;;
  3025                           
  3026                           
  3027                           ;psect for function ___awtoft
  3028  07D6                     ___awtoft:	
  3029                           
  3030                           ;incstack = 0
  3031                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  3032  07D6  01FD               	clrf	___awtoft@sign
  3033  07D7  1FF9               	btfss	___awtoft@c+1,7
  3034  07D8  2FE0               	goto	i1l1438
  3035  07D9  09F8               	comf	___awtoft@c,f
  3036  07DA  09F9               	comf	___awtoft@c+1,f
  3037  07DB  0AF8               	incf	___awtoft@c,f
  3038  07DC  1903               	skipnz
  3039  07DD  0AF9               	incf	___awtoft@c+1,f
  3040  07DE  01FD               	clrf	___awtoft@sign
  3041  07DF  0AFD               	incf	___awtoft@sign,f
  3042  07E0                     i1l1438:	
  3043  07E0  0878               	movf	___awtoft@c,w
  3044  07E1  00F0               	movwf	___ftpack@arg
  3045  07E2  0879               	movf	___awtoft@c+1,w
  3046  07E3  00F1               	movwf	___ftpack@arg+1
  3047  07E4  01F2               	clrf	___ftpack@arg+2
  3048  07E5  308E               	movlw	142
  3049  07E6  00FB               	movwf	??___awtoft
  3050  07E7  087B               	movf	??___awtoft,w
  3051  07E8  00F3               	movwf	___ftpack@exp
  3052  07E9  087D               	movf	___awtoft@sign,w
  3053  07EA  00FC               	movwf	??___awtoft+1
  3054  07EB  087C               	movf	??___awtoft+1,w
  3055  07EC  00F4               	movwf	___ftpack@sign
  3056  07ED  120A  118A  2644   	fcall	___ftpack
  3057  07F0  0870               	movf	?___ftpack,w
  3058  07F1  00F8               	movwf	?___awtoft
  3059  07F2  0871               	movf	?___ftpack+1,w
  3060  07F3  00F9               	movwf	?___awtoft+1
  3061  07F4  0872               	movf	?___ftpack+2,w
  3062  07F5  00FA               	movwf	?___awtoft+2
  3063  07F6  0008               	return
  3064  07F7                     __end_of___awtoft:	
  3065                           
  3066                           	psect	text12
  3067  0644                     __ptext12:	
  3068 ;; *************** function ___ftpack *****************
  3069 ;; Defined at:
  3070 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
  3071 ;; Parameters:    Size  Location     Type
  3072 ;;  arg             3    0[COMMON] unsigned um
  3073 ;;  exp             1    3[COMMON] unsigned char 
  3074 ;;  sign            1    4[COMMON] unsigned char 
  3075 ;; Auto vars:     Size  Location     Type
  3076 ;;		None
  3077 ;; Return value:  Size  Location     Type
  3078 ;;                  3    0[COMMON] float 
  3079 ;; Registers used:
  3080 ;;		wreg, status,2, status,0
  3081 ;; Tracked objects:
  3082 ;;		On entry : 0/0
  3083 ;;		On exit  : 0/0
  3084 ;;		Unchanged: 0/0
  3085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3086 ;;      Params:         5       0       0       0       0
  3087 ;;      Locals:         0       0       0       0       0
  3088 ;;      Temps:          3       0       0       0       0
  3089 ;;      Totals:         8       0       0       0       0
  3090 ;;Total ram usage:        8 bytes
  3091 ;; Hardware stack levels used:    1
  3092 ;; This function calls:
  3093 ;;		Nothing
  3094 ;; This function is called by:
  3095 ;;		___awtoft
  3096 ;;		___ftmul
  3097 ;; This function uses a non-reentrant model
  3098 ;;
  3099                           
  3100                           
  3101                           ;psect for function ___ftpack
  3102  0644                     ___ftpack:	
  3103                           
  3104                           ;incstack = 0
  3105                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  3106  0644  0873               	movf	___ftpack@exp,w
  3107  0645  1903               	btfsc	3,2
  3108  0646  2E4C               	goto	i1l1180
  3109  0647  0872               	movf	___ftpack@arg+2,w
  3110  0648  0471               	iorwf	___ftpack@arg+1,w
  3111  0649  0470               	iorwf	___ftpack@arg,w
  3112  064A  1D03               	skipz
  3113  064B  2E5F               	goto	i1l1186
  3114  064C                     i1l1180:	
  3115  064C  3000               	movlw	0
  3116  064D  00F0               	movwf	?___ftpack
  3117  064E  3000               	movlw	0
  3118  064F  00F1               	movwf	?___ftpack+1
  3119  0650  3000               	movlw	0
  3120  0651  00F2               	movwf	?___ftpack+2
  3121  0652  0008               	return
  3122  0653                     i1l1184:	
  3123  0653  3001               	movlw	1
  3124  0654  00F5               	movwf	??___ftpack
  3125  0655  0875               	movf	??___ftpack,w
  3126  0656  07F3               	addwf	___ftpack@exp,f
  3127  0657  3001               	movlw	1
  3128  0658                     u105_25:	
  3129  0658  1003               	clrc
  3130  0659  0CF2               	rrf	___ftpack@arg+2,f
  3131  065A  0CF1               	rrf	___ftpack@arg+1,f
  3132  065B  0CF0               	rrf	___ftpack@arg,f
  3133  065C  3EFF               	addlw	-1
  3134  065D  1D03               	skipz
  3135  065E  2E58               	goto	u105_25
  3136  065F                     i1l1186:	
  3137  065F  30FE               	movlw	254
  3138  0660  0572               	andwf	___ftpack@arg+2,w
  3139  0661  1903               	btfsc	3,2
  3140  0662  2E7A               	goto	i1l387
  3141  0663  2E53               	goto	i1l1184
  3142  0664                     i1l1188:	
  3143  0664  3001               	movlw	1
  3144  0665  00F5               	movwf	??___ftpack
  3145  0666  0875               	movf	??___ftpack,w
  3146  0667  07F3               	addwf	___ftpack@exp,f
  3147  0668  3001               	movlw	1
  3148  0669  07F0               	addwf	___ftpack@arg,f
  3149  066A  3000               	movlw	0
  3150  066B  1803               	skipnc
  3151  066C  3001               	movlw	1
  3152  066D  07F1               	addwf	___ftpack@arg+1,f
  3153  066E  3000               	movlw	0
  3154  066F  1803               	skipnc
  3155  0670  3001               	movlw	1
  3156  0671  07F2               	addwf	___ftpack@arg+2,f
  3157  0672  3001               	movlw	1
  3158  0673                     u107_25:	
  3159  0673  1003               	clrc
  3160  0674  0CF2               	rrf	___ftpack@arg+2,f
  3161  0675  0CF1               	rrf	___ftpack@arg+1,f
  3162  0676  0CF0               	rrf	___ftpack@arg,f
  3163  0677  3EFF               	addlw	-1
  3164  0678  1D03               	skipz
  3165  0679  2E73               	goto	u107_25
  3166  067A                     i1l387:	
  3167  067A  30FF               	movlw	255
  3168  067B  0572               	andwf	___ftpack@arg+2,w
  3169  067C  1903               	btfsc	3,2
  3170  067D  2E89               	goto	i1l1196
  3171  067E  2E64               	goto	i1l1188
  3172  067F                     i1l1194:	
  3173  067F  3001               	movlw	1
  3174  0680  02F3               	subwf	___ftpack@exp,f
  3175  0681  3001               	movlw	1
  3176  0682                     u109_25:	
  3177  0682  1003               	clrc
  3178  0683  0DF0               	rlf	___ftpack@arg,f
  3179  0684  0DF1               	rlf	___ftpack@arg+1,f
  3180  0685  0DF2               	rlf	___ftpack@arg+2,f
  3181  0686  3EFF               	addlw	-1
  3182  0687  1D03               	skipz
  3183  0688  2E82               	goto	u109_25
  3184  0689                     i1l1196:	
  3185  0689  1BF1               	btfsc	___ftpack@arg+1,7
  3186  068A  2E8F               	goto	i1l394
  3187  068B  3002               	movlw	2
  3188  068C  0273               	subwf	___ftpack@exp,w
  3189  068D  1803               	skipnc
  3190  068E  2E7F               	goto	i1l1194
  3191  068F                     i1l394:	
  3192  068F  1873               	btfsc	___ftpack@exp,0
  3193  0690  2E97               	goto	i1l395
  3194  0691  30FF               	movlw	255
  3195  0692  05F0               	andwf	___ftpack@arg,f
  3196  0693  307F               	movlw	127
  3197  0694  05F1               	andwf	___ftpack@arg+1,f
  3198  0695  30FF               	movlw	255
  3199  0696  05F2               	andwf	___ftpack@arg+2,f
  3200  0697                     i1l395:	
  3201  0697  1003               	clrc
  3202  0698  0CF3               	rrf	___ftpack@exp,f
  3203  0699  0873               	movf	___ftpack@exp,w
  3204  069A  00F5               	movwf	??___ftpack
  3205  069B  01F6               	clrf	??___ftpack+1
  3206  069C  01F7               	clrf	??___ftpack+2
  3207  069D  3010               	movlw	16
  3208  069E                     u113_25:	
  3209  069E  1003               	clrc
  3210  069F  0DF5               	rlf	??___ftpack,f
  3211  06A0  0DF6               	rlf	??___ftpack+1,f
  3212  06A1  0DF7               	rlf	??___ftpack+2,f
  3213  06A2  3EFF               	addlw	-1
  3214  06A3  1D03               	skipz
  3215  06A4  2E9E               	goto	u113_25
  3216  06A5  0875               	movf	??___ftpack,w
  3217  06A6  04F0               	iorwf	___ftpack@arg,f
  3218  06A7  0876               	movf	??___ftpack+1,w
  3219  06A8  04F1               	iorwf	___ftpack@arg+1,f
  3220  06A9  0877               	movf	??___ftpack+2,w
  3221  06AA  04F2               	iorwf	___ftpack@arg+2,f
  3222  06AB  0874               	movf	___ftpack@sign,w
  3223  06AC  1903               	btfsc	3,2
  3224  06AD  0008               	return
  3225  06AE  17F2               	bsf	___ftpack@arg+2,7
  3226  06AF  0008               	return
  3227  06B0                     __end_of___ftpack:	
  3228                           
  3229                           	psect	text13
  3230  070B                     __ptext13:	
  3231 ;; *************** function ___awmod *****************
  3232 ;; Defined at:
  3233 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awmod.c"
  3234 ;; Parameters:    Size  Location     Type
  3235 ;;  divisor         2    0[COMMON] int 
  3236 ;;  dividend        2    2[COMMON] int 
  3237 ;; Auto vars:     Size  Location     Type
  3238 ;;  sign            1    6[COMMON] unsigned char 
  3239 ;;  counter         1    5[COMMON] unsigned char 
  3240 ;; Return value:  Size  Location     Type
  3241 ;;                  2    0[COMMON] int 
  3242 ;; Registers used:
  3243 ;;		wreg, status,2, status,0
  3244 ;; Tracked objects:
  3245 ;;		On entry : 0/0
  3246 ;;		On exit  : 0/0
  3247 ;;		Unchanged: 0/0
  3248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3249 ;;      Params:         4       0       0       0       0
  3250 ;;      Locals:         2       0       0       0       0
  3251 ;;      Temps:          1       0       0       0       0
  3252 ;;      Totals:         7       0       0       0       0
  3253 ;;Total ram usage:        7 bytes
  3254 ;; Hardware stack levels used:    1
  3255 ;; This function calls:
  3256 ;;		Nothing
  3257 ;; This function is called by:
  3258 ;;		_ISR
  3259 ;; This function uses a non-reentrant model
  3260 ;;
  3261                           
  3262                           
  3263                           ;psect for function ___awmod
  3264  070B                     ___awmod:	
  3265                           
  3266                           ;incstack = 0
  3267                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  3268  070B  01F6               	clrf	___awmod@sign
  3269  070C  1FF3               	btfss	___awmod@dividend+1,7
  3270  070D  2F15               	goto	i1l1400
  3271  070E  09F2               	comf	___awmod@dividend,f
  3272  070F  09F3               	comf	___awmod@dividend+1,f
  3273  0710  0AF2               	incf	___awmod@dividend,f
  3274  0711  1903               	skipnz
  3275  0712  0AF3               	incf	___awmod@dividend+1,f
  3276  0713  01F6               	clrf	___awmod@sign
  3277  0714  0AF6               	incf	___awmod@sign,f
  3278  0715                     i1l1400:	
  3279  0715  1FF1               	btfss	___awmod@divisor+1,7
  3280  0716  2F1C               	goto	i1l1404
  3281  0717  09F0               	comf	___awmod@divisor,f
  3282  0718  09F1               	comf	___awmod@divisor+1,f
  3283  0719  0AF0               	incf	___awmod@divisor,f
  3284  071A  1903               	skipnz
  3285  071B  0AF1               	incf	___awmod@divisor+1,f
  3286  071C                     i1l1404:	
  3287  071C  0870               	movf	___awmod@divisor,w
  3288  071D  0471               	iorwf	___awmod@divisor+1,w
  3289  071E  1903               	btfsc	3,2
  3290  071F  2F49               	goto	i1l1422
  3291  0720  01F5               	clrf	___awmod@counter
  3292  0721  0AF5               	incf	___awmod@counter,f
  3293  0722                     i1l1412:	
  3294  0722  1BF1               	btfsc	___awmod@divisor+1,7
  3295  0723  2F30               	goto	i1l1414
  3296  0724  3001               	movlw	1
  3297  0725                     u151_25:	
  3298  0725  1003               	clrc
  3299  0726  0DF0               	rlf	___awmod@divisor,f
  3300  0727  0DF1               	rlf	___awmod@divisor+1,f
  3301  0728  3EFF               	addlw	-1
  3302  0729  1D03               	skipz
  3303  072A  2F25               	goto	u151_25
  3304  072B  3001               	movlw	1
  3305  072C  00F4               	movwf	??___awmod
  3306  072D  0874               	movf	??___awmod,w
  3307  072E  07F5               	addwf	___awmod@counter,f
  3308  072F  2F22               	goto	i1l1412
  3309  0730                     i1l1414:	
  3310  0730  0871               	movf	___awmod@divisor+1,w
  3311  0731  0273               	subwf	___awmod@dividend+1,w
  3312  0732  1D03               	skipz
  3313  0733  2F36               	goto	u153_25
  3314  0734  0870               	movf	___awmod@divisor,w
  3315  0735  0272               	subwf	___awmod@dividend,w
  3316  0736                     u153_25:	
  3317  0736  1C03               	skipc
  3318  0737  2F3E               	goto	i1l1418
  3319  0738  0870               	movf	___awmod@divisor,w
  3320  0739  02F2               	subwf	___awmod@dividend,f
  3321  073A  0871               	movf	___awmod@divisor+1,w
  3322  073B  1C03               	skipc
  3323  073C  03F3               	decf	___awmod@dividend+1,f
  3324  073D  02F3               	subwf	___awmod@dividend+1,f
  3325  073E                     i1l1418:	
  3326  073E  3001               	movlw	1
  3327  073F                     u154_25:	
  3328  073F  1003               	clrc
  3329  0740  0CF1               	rrf	___awmod@divisor+1,f
  3330  0741  0CF0               	rrf	___awmod@divisor,f
  3331  0742  3EFF               	addlw	-1
  3332  0743  1D03               	skipz
  3333  0744  2F3F               	goto	u154_25
  3334  0745  3001               	movlw	1
  3335  0746  02F5               	subwf	___awmod@counter,f
  3336  0747  1D03               	btfss	3,2
  3337  0748  2F30               	goto	i1l1414
  3338  0749                     i1l1422:	
  3339  0749  0876               	movf	___awmod@sign,w
  3340  074A  1903               	btfsc	3,2
  3341  074B  2F51               	goto	i1l1426
  3342  074C  09F2               	comf	___awmod@dividend,f
  3343  074D  09F3               	comf	___awmod@dividend+1,f
  3344  074E  0AF2               	incf	___awmod@dividend,f
  3345  074F  1903               	skipnz
  3346  0750  0AF3               	incf	___awmod@dividend+1,f
  3347  0751                     i1l1426:	
  3348  0751  0873               	movf	___awmod@dividend+1,w
  3349  0752  00F1               	movwf	?___awmod+1
  3350  0753  0872               	movf	___awmod@dividend,w
  3351  0754  00F0               	movwf	?___awmod
  3352  0755  0008               	return
  3353  0756                     __end_of___awmod:	
  3354                           
  3355                           	psect	text14
  3356  06B0                     __ptext14:	
  3357 ;; *************** function ___awdiv *****************
  3358 ;; Defined at:
  3359 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
  3360 ;; Parameters:    Size  Location     Type
  3361 ;;  divisor         2    7[COMMON] int 
  3362 ;;  dividend        2    9[COMMON] int 
  3363 ;; Auto vars:     Size  Location     Type
  3364 ;;  quotient        2    2[BANK0 ] int 
  3365 ;;  sign            1    1[BANK0 ] unsigned char 
  3366 ;;  counter         1    0[BANK0 ] unsigned char 
  3367 ;; Return value:  Size  Location     Type
  3368 ;;                  2    7[COMMON] int 
  3369 ;; Registers used:
  3370 ;;		wreg, status,2, status,0
  3371 ;; Tracked objects:
  3372 ;;		On entry : 0/0
  3373 ;;		On exit  : 0/0
  3374 ;;		Unchanged: 0/0
  3375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3376 ;;      Params:         4       0       0       0       0
  3377 ;;      Locals:         0       4       0       0       0
  3378 ;;      Temps:          1       0       0       0       0
  3379 ;;      Totals:         5       4       0       0       0
  3380 ;;Total ram usage:        9 bytes
  3381 ;; Hardware stack levels used:    1
  3382 ;; This function calls:
  3383 ;;		Nothing
  3384 ;; This function is called by:
  3385 ;;		_ISR
  3386 ;; This function uses a non-reentrant model
  3387 ;;
  3388                           
  3389                           
  3390                           ;psect for function ___awdiv
  3391  06B0                     ___awdiv:	
  3392                           
  3393                           ;incstack = 0
  3394                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3395  06B0  1283               	bcf	3,5	;RP0=0, select bank0
  3396  06B1  1303               	bcf	3,6	;RP1=0, select bank0
  3397  06B2  01A1               	clrf	___awdiv@sign
  3398  06B3  1FF8               	btfss	___awdiv@divisor+1,7
  3399  06B4  2EBC               	goto	i1l1356
  3400  06B5  09F7               	comf	___awdiv@divisor,f
  3401  06B6  09F8               	comf	___awdiv@divisor+1,f
  3402  06B7  0AF7               	incf	___awdiv@divisor,f
  3403  06B8  1903               	skipnz
  3404  06B9  0AF8               	incf	___awdiv@divisor+1,f
  3405  06BA  01A1               	clrf	___awdiv@sign
  3406  06BB  0AA1               	incf	___awdiv@sign,f
  3407  06BC                     i1l1356:	
  3408  06BC  1FFA               	btfss	___awdiv@dividend+1,7
  3409  06BD  2EC7               	goto	i1l1362
  3410  06BE  09F9               	comf	___awdiv@dividend,f
  3411  06BF  09FA               	comf	___awdiv@dividend+1,f
  3412  06C0  0AF9               	incf	___awdiv@dividend,f
  3413  06C1  1903               	skipnz
  3414  06C2  0AFA               	incf	___awdiv@dividend+1,f
  3415  06C3  3001               	movlw	1
  3416  06C4  00FB               	movwf	??___awdiv
  3417  06C5  087B               	movf	??___awdiv,w
  3418  06C6  06A1               	xorwf	___awdiv@sign,f
  3419  06C7                     i1l1362:	
  3420  06C7  01A2               	clrf	___awdiv@quotient
  3421  06C8  01A3               	clrf	___awdiv@quotient+1
  3422  06C9  0877               	movf	___awdiv@divisor,w
  3423  06CA  0478               	iorwf	___awdiv@divisor+1,w
  3424  06CB  1903               	btfsc	3,2
  3425  06CC  2EFE               	goto	i1l1384
  3426  06CD  01A0               	clrf	___awdiv@counter
  3427  06CE  0AA0               	incf	___awdiv@counter,f
  3428  06CF                     i1l1372:	
  3429  06CF  1BF8               	btfsc	___awdiv@divisor+1,7
  3430  06D0  2EDD               	goto	i1l1374
  3431  06D1  3001               	movlw	1
  3432  06D2                     u141_25:	
  3433  06D2  1003               	clrc
  3434  06D3  0DF7               	rlf	___awdiv@divisor,f
  3435  06D4  0DF8               	rlf	___awdiv@divisor+1,f
  3436  06D5  3EFF               	addlw	-1
  3437  06D6  1D03               	skipz
  3438  06D7  2ED2               	goto	u141_25
  3439  06D8  3001               	movlw	1
  3440  06D9  00FB               	movwf	??___awdiv
  3441  06DA  087B               	movf	??___awdiv,w
  3442  06DB  07A0               	addwf	___awdiv@counter,f
  3443  06DC  2ECF               	goto	i1l1372
  3444  06DD                     i1l1374:	
  3445  06DD  3001               	movlw	1
  3446  06DE                     u143_25:	
  3447  06DE  1003               	clrc
  3448  06DF  0DA2               	rlf	___awdiv@quotient,f
  3449  06E0  0DA3               	rlf	___awdiv@quotient+1,f
  3450  06E1  3EFF               	addlw	-1
  3451  06E2  1D03               	skipz
  3452  06E3  2EDE               	goto	u143_25
  3453  06E4  0878               	movf	___awdiv@divisor+1,w
  3454  06E5  027A               	subwf	___awdiv@dividend+1,w
  3455  06E6  1D03               	skipz
  3456  06E7  2EEA               	goto	u144_25
  3457  06E8  0877               	movf	___awdiv@divisor,w
  3458  06E9  0279               	subwf	___awdiv@dividend,w
  3459  06EA                     u144_25:	
  3460  06EA  1C03               	skipc
  3461  06EB  2EF3               	goto	i1l1380
  3462  06EC  0877               	movf	___awdiv@divisor,w
  3463  06ED  02F9               	subwf	___awdiv@dividend,f
  3464  06EE  0878               	movf	___awdiv@divisor+1,w
  3465  06EF  1C03               	skipc
  3466  06F0  03FA               	decf	___awdiv@dividend+1,f
  3467  06F1  02FA               	subwf	___awdiv@dividend+1,f
  3468  06F2  1422               	bsf	___awdiv@quotient,0
  3469  06F3                     i1l1380:	
  3470  06F3  3001               	movlw	1
  3471  06F4                     u145_25:	
  3472  06F4  1003               	clrc
  3473  06F5  0CF8               	rrf	___awdiv@divisor+1,f
  3474  06F6  0CF7               	rrf	___awdiv@divisor,f
  3475  06F7  3EFF               	addlw	-1
  3476  06F8  1D03               	skipz
  3477  06F9  2EF4               	goto	u145_25
  3478  06FA  3001               	movlw	1
  3479  06FB  02A0               	subwf	___awdiv@counter,f
  3480  06FC  1D03               	btfss	3,2
  3481  06FD  2EDD               	goto	i1l1374
  3482  06FE                     i1l1384:	
  3483  06FE  0821               	movf	___awdiv@sign,w
  3484  06FF  1903               	btfsc	3,2
  3485  0700  2F06               	goto	i1l1388
  3486  0701  09A2               	comf	___awdiv@quotient,f
  3487  0702  09A3               	comf	___awdiv@quotient+1,f
  3488  0703  0AA2               	incf	___awdiv@quotient,f
  3489  0704  1903               	skipnz
  3490  0705  0AA3               	incf	___awdiv@quotient+1,f
  3491  0706                     i1l1388:	
  3492  0706  0823               	movf	___awdiv@quotient+1,w
  3493  0707  00F8               	movwf	?___awdiv+1
  3494  0708  0822               	movf	___awdiv@quotient,w
  3495  0709  00F7               	movwf	?___awdiv
  3496  070A  0008               	return
  3497  070B                     __end_of___awdiv:	
  3498  007E                     btemp	set	126	;btemp
  3499  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     54      61
    BANK1            80     40      46
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    UART_Read_Text@Output	PTR unsigned char  size(1) Largest target is 3
		 -> c2(BANK1[3]), c1(BANK1[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->___awtoft
    ___fttol->___awtoft
    ___ftmul->___awtoft
    ___awtoft->___ftpack
    ___awdiv->___awmod

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->___fttol
    ___fttol->___ftmul

Critical Paths under _main in BANK1

    _main->_UART_Init
    _UART_Init->___aldiv

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    1045
                                             33 BANK1      7     7      0
                    _UART_Data_Ready
                          _UART_Init
                          _UART_Read
                     _UART_Read_Text
 ---------------------------------------------------------------------------------
 (1) _UART_Read_Text                                       9     7      2     250
                                              0 BANK1      7     5      2
                          _UART_Read
 ---------------------------------------------------------------------------------
 (2) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           18    14      4     721
                                             15 BANK1     18    14      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     512
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _UART_Data_Ready                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                 24    24      0    6497
                                             30 BANK0     24    24      0
                            ___awdiv
                            ___awmod
                           ___awtoft
                            ___ftmul
                            ___fttol
                             ___wmul
                          _decTo7Seg
 ---------------------------------------------------------------------------------
 (4) _decTo7Seg                                            2     0      2     181
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     304
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             14    10      4     358
                                             16 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    2167
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             6     3      3    1826
                                              8 COMMON     6     3      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    1629
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4     614
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4     618
                                              7 COMMON     5     1      4
                                              0 BANK0      4     4      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Data_Ready
   _UART_Init
     ___aldiv
   _UART_Read
   _UART_Read_Text
     _UART_Read

 _ISR (ROOT)
   ___awdiv
     ___awmod (ARG)
   ___awmod
   ___awtoft
     ___ftpack
     ___wmul (ARG)
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
   ___fttol
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___wmul (ARG)
   ___wmul
   _decTo7Seg

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     28      2E       7       57.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     36      3D       5       76.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      79      12        0.0%
ABS                  0      0      79       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Wed Jan 01 09:05:24 2020

             __CFG_CP$OFF 0000                        l65 07F7                        _c1 00CB  
                      _c2 00C8              ___awdiv@sign 0021                        _at 0058  
                      _en 005C                        _wt 0056       ___wmul@multiplicand 0072  
                     l131 02F2                       l129 0288                       l281 0539  
                     _GIE 005F                       _RB2 0032                       _RB5 0035  
                     _RB6 0036                       _RB7 0037              __CFG_CPD$OFF 0000  
                     _ISR 003C                       fsr0 0004                       indf 0000  
            ___awmod@sign 0076              __CFG_FOSC$HS 0000              __CFG_LVP$OFF 0000  
                    ?_ISR 0070                      ISR@i 0054                      ISR@j 0052  
                    ISR@x 0050                      l1240 059F                      l1226 055A  
                    l1218 054A                      l1244 05AD                      l1236 0592  
                    l1228 056A                      l1256 043D                      l1282 0796  
                    l1702 0330                      l1712 0357                      l1670 02A0  
                    l1656 0252                      l1684 02D7                      _BRGH 04C2  
                    _CREN 00C4                      u1205 056C                      u1310 041E  
                    u1215 0581                      u1311 041F                      u1312 0424  
                    u1225 0593                      u1313 0425                      u1305 0404  
                    u2107 0328                      u2117 0350                      u2037 0268  
                    u1270 03B5                      u1271 03B6                      u1255 037A  
                    u1335 079C                      u2127 0364                      u2047 0279  
                    u1272 03BB                      u1185 055E                      u1273 03BC  
                    u1265 039B                      u2057 0293                      u2067 02AC  
                    u2077 02CF                      u1295 03E3                      u2087 02EB  
                    u2097 02FA                      u1955 025B                      _PEIE 005E  
                    _INTE 005C                      _INTF 0059                      _RCIF 0065  
                    i1l91 0790                      _SPEN 00C7                      _TXEN 04C5  
                    _SYNC 04C4              __CFG_WRT$OFF 0000                      _main 0226  
            ___ftpack@arg 0070              ___ftpack@exp 0073                      btemp 007E  
           __CFG_BOREN$ON 0000                      start 0012              ___ftmul@cntr 002E  
            ___ftmul@sign 002F                     ??_ISR 003E              ___fttol@exp1 003D  
            ___fttol@lval 0039                     ISR@x0 004A                     ISR@x1 0048  
                   ISR@x2 0046                     ISR@dl 004E           __end_of___aldiv 05B6  
                   ?_main 0070           __end_of___awdiv 070B             __CFG_WDTE$OFF 0000  
         __end_of___awmod 0756           __end_of___ftmul 0527           ___awdiv@divisor 0077  
         __end_of___fttol 0644                     i1l122 021B                     i1l226 07BF  
                   i1l394 068F                     i1l395 0697                     i1l387 067A  
                   i1l478 062A           ___awdiv@counter 0020                     _RCREG 001A  
    UART_Read_Text@Output 00A4                     _SPBRG 0099                     _PORTC 0007  
                   _PORTD 0008                     _TRISC 0087                     _TRISD 0088  
           __CFG_PWRTE$ON 0000        __size_of_UART_Init 00E5        __size_of_UART_Read 0006  
    UART_Read_Text@length 00A0             ___awtoft@sign 007D                     _count 005A  
           ___ftpack@sign 0074                     main@k 00C4                     pclath 000A  
                   status 0003                     wtemp0 007E           __initialization 0015  
            __end_of_main 036F                    ??_main 00C1             ___fttol@sign1 0038  
        ___awdiv@dividend 0079          __end_of___awtoft 07F7          __end_of___ftpack 06B0  
                  i1l1310 0763                    i1l1302 075F                    i1l1400 0715  
                  i1l1322 0769                    i1l1314 0765                    i1l1306 0761  
                  i1l1412 0722                    i1l1404 071C                    i1l1180 064C  
                  i1l1414 0730                    i1l1422 0749                    i1l1318 0767  
                  i1l1184 0653                    i1l1336 07B7                    i1l1328 076B  
                  i1l1362 06C7                    i1l1426 0751                    i1l1418 073E  
                  i1l1194 067F                    i1l1186 065F                    i1l1530 063B  
                  i1l1290 0759                    i1l1380 06F3                    i1l1372 06CF  
                  i1l1356 06BC                    i1l1196 0689                    i1l1188 0664  
                  i1l1524 061F                    i1l1516 0602                    i1l1604 01E9  
                  i1l1540 0050                    i1l1374 06DD                    i1l1438 07E0  
                  i1l1470 04D1                    i1l1454 0482                    i1l1526 062D  
                  i1l1518 0612                    i1l1294 075B                    i1l1286 0757  
                  i1l1614 0206                    i1l1384 06FE                    i1l1448 046C  
                  i1l1552 00F3                    i1l1544 00EA                    i1l1482 04F9  
                  i1l1466 04C1                    i1l1298 075D                    i1l1618 0217  
                  i1l1562 0118                    i1l1570 0126                    i1l1388 0706  
                  u113_25 069E                    u105_25 0658                    i1l1478 04E9  
                  i1l1590 01A7                    i1l1566 011E                    i1l1498 05D0  
                  i1l1738 0770                    i1l1578 013D                    u107_25 0673  
                  u141_25 06D2                    u109_25 0682                    u213_27 0049  
                  u214_27 0109                    u143_25 06DE                    u151_25 0725  
                  u135_25 07C0                    u215_27 0130                    u144_25 06EA  
                  u160_25 048E                    u136_25 07C7                    u216_27 01C9  
                  u145_25 06F4                    u153_25 0736                    u161_25 04A0  
                  u217_27 01F1                    u154_25 073F                    u170_25 0502  
                  u164_25 04D2                    u165_25 04DA                    u173_25 05D7  
                  u191_25 01E7                    u176_25 0603                    u169_25 04FA  
                  u194_25 0215                    u179_25 0621                    u189_25 019F  
                  _TRISB0 0430                    _TRISB2 0432                    _TRISB5 0435  
                  _TRISB6 0436                    _TRISB7 0437                    _TRISC7 043F  
       __end_of_UART_Init 0454         __end_of_UART_Read 07FD                 ??___aldiv 00A8  
                  ___wmul 07B5                 ??___awdiv 007B                 ??___awmod 0074  
               ??___ftmul 0026                 ??___fttol 0034   __size_of_UART_Read_Text 0024  
        ___awdiv@quotient 0022           ___awmod@divisor 0070           ___awmod@counter 0075  
   ___ftmul@f3_as_product 002B                    saved_w 007E   __end_of__initialization 0038  
      __size_of_decTo7Seg 003B                ___awtoft@c 0078                ___ftmul@f1 0020  
              ___ftmul@f2 0023                ___fttol@f1 0030            __pcstackCOMMON 0070  
            __pidataBANK0 0FF6                __pbssBANK0 005A                __pbssBANK1 00C8  
__size_of_UART_Data_Ready 0006                __pmaintext 0226                decTo7Seg@a 0070  
                 ?___wmul 0070                __pintentry 0004                 ?___awtoft 0078  
               ?___ftpack 0070                   _ISR$488 004C         __end_of_decTo7Seg 0791  
                 ___aldiv 0527                   ___awdiv 06B0                   ___awmod 070B  
         __size_of___wmul 0021                   ___ftmul 0454                   ___fttol 05B6  
          _UART_Read_Text 0791                ??___awtoft 007B                ??___ftpack 0075  
                 __ptext1 0791                   __ptext2 07F7                   __ptext3 036F  
                 __ptext4 0527                   __ptext5 0FFA                   __ptext6 003C  
                 __ptext7 0756                   __ptext8 07B5                   __ptext9 05B6  
            __size_of_ISR 01EA          ___awmod@dividend 0072          ___aldiv@dividend 00A4  
                 main@atc 00C6                   main@wtc 00C7      end_of_initialization 0038  
  __end_of_UART_Read_Text 07B5          ___aldiv@quotient 00AB         ??_UART_Data_Ready 00A0  
               _UART_Init 036F                 _UART_Read 07F7               ___ftmul@exp 002A  
         ?_UART_Read_Text 00A0            __end_of___wmul 07D6                ?_UART_Init 00AF  
              ?_UART_Read 0070       start_initialization 0015               __end_of_ISR 0226  
                ??___wmul 0074               __pdataBANK0 0056         __size_of___awtoft 0021  
       __size_of___ftpack 006C                 ___latbits 0002             __pcstackBANK0 0020  
           __pcstackBANK1 00A0                 _decTo7Seg 0756                  ?___aldiv 00A0  
                ?___awdiv 0077                  ?___awmod 0070                  ?___ftmul 0020  
                ?___fttol 0030               ??_UART_Init 00B3               ??_UART_Read 00A0  
              ?_decTo7Seg 0070                UART_Init@x 00BF           ___aldiv@divisor 00A0  
       interrupt_function 0004           ___aldiv@counter 00A9            ___wmul@product 0074  
         _UART_Data_Ready 0FFA         UART_Init@baudrate 00AF         ___wmul@multiplier 0070  
      UART_Read_Text@i_60 00A5          ??_UART_Read_Text 00A2          __size_of___aldiv 008F  
        __size_of___awdiv 005B          __size_of___awmod 004B          __size_of___ftmul 00D3  
        __size_of___fttol 008E                  ___awtoft 07D6                  ___ftpack 0644  
                __ptext10 0454                  __ptext11 07D6                  __ptext12 0644  
                __ptext13 070B                  __ptext14 06B0   __end_of_UART_Data_Ready 1000  
             ??_decTo7Seg 0072             __size_of_main 0149                  intlevel1 0000  
            ___aldiv@sign 00AA          ?_UART_Data_Ready 0070  
